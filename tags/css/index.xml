<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>css on (map solve problems)</title>
    <link>https://yantonov.com/tags/css/</link>
    <description>Recent content in css on (map solve problems)</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Dec 2019 12:39:07 +0500</lastBuildDate>
    
        <atom:link href="https://yantonov.com/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serve dotfiles directly from a git repository</title>
      <link>https://yantonov.com/2021/02/2021-02-13-19-59-serve_dotfiles_directly_from_a_git_repository/</link>
      <pubDate>Sat, 13 Feb 2021 19:59:18 +0100</pubDate>
      
      <guid>https://yantonov.com/2021/02/2021-02-13-19-59-serve_dotfiles_directly_from_a_git_repository/</guid>
      <description>Here is an interesting article which explains another way to store dotfiles.
In a couple of words:
 store dotfiles into a git repository clone your git repository using a bare more and make working directory pointing to ${HOME} use dotfiles directly from the repository (without symbolic links)  The only disadvantage is that all dotfiles must be inside one repository. It is not scalable approach in that sense that typically configuration files for the different programs are splitted into multiple repositories.</description>
    </item>
    
    <item>
      <title>Academic salaries</title>
      <link>https://yantonov.com/2020/12/2020-12-15-22-36-academic_salaries/</link>
      <pubDate>Tue, 15 Dec 2020 22:36:54 +0100</pubDate>
      
      <guid>https://yantonov.com/2020/12/2020-12-15-22-36-academic_salaries/</guid>
      <description>Interesting statistics about academic salaries
Source</description>
    </item>
    
    <item>
      <title>How to fix Lenovo X1 Carbon 8th gen sound problem on Windows 10</title>
      <link>https://yantonov.com/2020/11/2020-11-14-11-30-how_to_fix_lenovo_x1_carbon_8th_gen_sound_problem_on_windows_10/</link>
      <pubDate>Sat, 14 Nov 2020 11:30:58 +0100</pubDate>
      
      <guid>https://yantonov.com/2020/11/2020-11-14-11-30-how_to_fix_lenovo_x1_carbon_8th_gen_sound_problem_on_windows_10/</guid>
      <description>If you faced with a sound problem (the sound just disappeared), and nothing helps (general troubleshooting, updating drivers, uninstalling audio devices etc, you can try to install Lenovo drivers.
Unfortunately it is not easy to find exactly this drivers. (the link to them is located at the second page of the corresponding topic at Levono forums)
Source (Lenovo forums page) link Drivers page (especially for 8th gen): link</description>
    </item>
    
    <item>
      <title>Entity component system</title>
      <link>https://yantonov.com/2020/10/2020-10-31-13-09-entity_component_system/</link>
      <pubDate>Sat, 31 Oct 2020 13:09:03 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/10/2020-10-31-13-09-entity_component_system/</guid>
      <description>Entity–component–system (ECS) is an architectural pattern that is mostly used in game development. Main points:
 every entity has unique id; every logic aspect is a component - raw data linked to the corresponding entity by id; system performs actions on entities having corresponding aspects/components; diffenent components can be stored separately; systems can track entities by using observer pattern.  More details can be found here.</description>
    </item>
    
    <item>
      <title>About passing dependencies through deep call stack</title>
      <link>https://yantonov.com/2020/10/2020-10-30-19-23-about_passing_dependencies_through_deep_call_stack/</link>
      <pubDate>Fri, 30 Oct 2020 19:23:06 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/10/2020-10-30-19-23-about_passing_dependencies_through_deep_call_stack/</guid>
      <description>Here is another approach to pass dependencies through deep call stack.
In a couple of words:
 deeply nested code not executes immediately but returns a function for the later lazy evaluation; the correponding function accepts the required environment; at the top level call the function returned from the nested code and pass the environment to it. Documentation.  </description>
    </item>
    
    <item>
      <title>Leaning n classes from m &lt; n samples</title>
      <link>https://yantonov.com/2020/10/2020-10-24-15-03-leaning_n_classes_from_m_less_n_samples/</link>
      <pubDate>Sat, 24 Oct 2020 15:03:37 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/10/2020-10-24-15-03-leaning_n_classes_from_m_less_n_samples/</guid>
      <description>Interesting and promissing approach to reduce number of samples during learning NN.
Arxiv link.</description>
    </item>
    
    <item>
      <title>Send notification to yandex station</title>
      <link>https://yantonov.com/2020/09/2020-09-20-19-34-send_notification_to_yandex_station/</link>
      <pubDate>Sun, 20 Sep 2020 19:34:38 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/09/2020-09-20-19-34-send_notification_to_yandex_station/</guid>
      <description>A couple of repositories which helps to send voice message to yandex station.
Unfortunately it is impossible to do it using official api.
 yashhik yandexstation  </description>
    </item>
    
    <item>
      <title>Temporary email from command line</title>
      <link>https://yantonov.com/2020/09/2020-09-15-21-50-temporary_email_from_command_line/</link>
      <pubDate>Tue, 15 Sep 2020 21:50:44 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/09/2020-09-15-21-50-temporary_email_from_command_line/</guid>
      <description>tmpmail - command line tool which allows to create temporary mailbox and receive emails from the terminal.
It uses 1secmail as a backend.
Spend a couple of minutes to read concise, clean bash code.</description>
    </item>
    
    <item>
      <title>About form labels</title>
      <link>https://yantonov.com/2020/09/2020-09-13-10-26-about_form_labels/</link>
      <pubDate>Sun, 13 Sep 2020 10:26:27 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/09/2020-09-13-10-26-about_form_labels/</guid>
      <description>Interesting article which explains the benefits of inlining labels inside form elements.
source</description>
    </item>
    
    <item>
      <title>Clean python setup</title>
      <link>https://yantonov.com/2020/09/2020-09-03-19-26-clean_python_setup/</link>
      <pubDate>Thu, 03 Sep 2020 19:26:10 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/09/2020-09-03-19-26-clean_python_setup/</guid>
      <description>Great article &amp;ldquo;A hygienic Python setup for Linux, Mac, and WSL&amp;rdquo; about python&#39;s packages installation and creating clean and reproducible enviroment.
In a couple of words:
 pyenv to control python interpreter version pipenv / poetry to control virtual environment settings. pipx to install python cli tools.  Thanks Angela Bassa for the article&#39;s link.</description>
    </item>
    
    <item>
      <title>WebRTC for the curious</title>
      <link>https://yantonov.com/2020/08/2020-08-31-13-37-webrtc_for_the_curious/</link>
      <pubDate>Mon, 31 Aug 2020 13:37:26 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/08/2020-08-31-13-37-webrtc_for_the_curious/</guid>
      <description>Free book about webRTC.
Github repository</description>
    </item>
    
    <item>
      <title>Nice alternative to mocks, generate stub implementation</title>
      <link>https://yantonov.com/2020/08/2020-08-27-17-47-nice_alternative_to_mocks_generate_stub_implementation/</link>
      <pubDate>Thu, 27 Aug 2020 17:47:15 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/08/2020-08-27-17-47-nice_alternative_to_mocks_generate_stub_implementation/</guid>
      <description>Here is nice go library named &amp;lsquo;moq&amp;rsquo; that helps you to easily test dependent code but without verbose mocks setup.
The idea is to generate trivial implementations and just save all the calls as a list preserving all the arguments.
Using this you can simply assert all the invariants and stop to write long mock setup.</description>
    </item>
    
    <item>
      <title>Umbrella</title>
      <link>https://yantonov.com/2020/08/2020-08-23-22-30-thi-ng-umbrella/</link>
      <pubDate>Sun, 23 Aug 2020 22:30:16 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/08/2020-08-23-22-30-thi-ng-umbrella/</guid>
      <description>Here is a collection of typescript libraries for a various scenarios (functional programming, data structrures, various helpers, ui tools, canvas helpers and many others)..
It a great example of granular libraries with clean code.
definitely it can be used in production, and moreover this is an excellent bunch of examples to learn typescript.
P.s. Thanks Vahid Kazemi for the link.</description>
    </item>
    
    <item>
      <title>Rust module system</title>
      <link>https://yantonov.com/2020/08/2020-08-22-22-21-rust_module_system/</link>
      <pubDate>Sat, 22 Aug 2020 22:21:49 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/08/2020-08-22-22-21-rust_module_system/</guid>
      <description>Here is a great article about rust module system.
Source</description>
    </item>
    
    <item>
      <title>Tofu</title>
      <link>https://yantonov.com/2020/08/2020-08-22-16-26-tofu/</link>
      <pubDate>Sat, 22 Aug 2020 16:26:20 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/08/2020-08-22-16-26-tofu/</guid>
      <description>Recently I had a look at tofu library.
Initially it seems this library provides granular typeclasses which provides developer to implement high level logic and substitute corresponding lower level implementation as proposed by tagless final approach.
But env module, for example looks overcomplicated but tecnhically provides reader monad. Definitely this is an acceptable approach, but it seems that monix task dependency introduce all this complexity. Why env contains any side effect specifics?</description>
    </item>
    
    <item>
      <title>Docker memory limit</title>
      <link>https://yantonov.com/2020/03/2020-03-30-08-16-docker_memory_limit/</link>
      <pubDate>Mon, 30 Mar 2020 08:16:41 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/03/2020-03-30-08-16-docker_memory_limit/</guid>
      <description>There are some options to control application memory consumption.
Docker has a couple of flags to control application inside the container.
 &amp;ndash;memory flag defines non swap memory limit &amp;ndash;memory-swap flag defines total memory limit (swap + non swap memory) Details can be found here  Moreover, there is a cgroups limit at the os level. To check it
cat /sys/fs/cgroup/memory/memory.limit_in_bytes When you try to check is, in some situations you can see some huge magic number</description>
    </item>
    
    <item>
      <title>Addict</title>
      <link>https://yantonov.com/2020/03/2020-03-01-12-31-addict/</link>
      <pubDate>Sun, 01 Mar 2020 12:31:37 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/03/2020-03-01-12-31-addict/</guid>
      <description>There is a nice python library addict which is interesting for a couple of reasons.
First of all, it simplifies creating a nested dictionary (see readme).
Secondly, it represents an another nice example of using python magic methods.</description>
    </item>
    
    <item>
      <title>Copa</title>
      <link>https://yantonov.com/2020/02/2020-02-27-18-56-copa/</link>
      <pubDate>Thu, 27 Feb 2020 18:56:37 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/02/2020-02-27-18-56-copa/</guid>
      <description>There is interesting end-to-end delay-based congestion control algorithm Copa.
Here you can find the details.
Facebook tried to use it and results seem very promising.</description>
    </item>
    
    <item>
      <title>Fix flash drive block size</title>
      <link>https://yantonov.com/2020/02/2020-02-26-15-58-fix_flash_drive_block_size/</link>
      <pubDate>Wed, 26 Feb 2020 15:58:08 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/02/2020-02-26-15-58-fix_flash_drive_block_size/</guid>
      <description>Let&#39;s suppose you want to format flash drive but while you are trying to start formatting you see an error like this &amp;lsquo;The driver descriptor says the physical block size is 2048 bytes, but Linux says it is 512 bytes&amp;rsquo;.
Moreover, partitions can not be removed using neigher gnome disk nor gparted.
In that case you can use fdisk with privileged access:
fdisk /dev/sdX To show partition you can use &amp;lsquo;p&amp;rsquo; command, to remove partition - &amp;lsquo;q&amp;rsquo; command.</description>
    </item>
    
    <item>
      <title>Open source continuous delivery server written in go lang</title>
      <link>https://yantonov.com/2020/01/2020-01-11-21-02-open_source_continuous_delivery_server_written_in_go_lang/</link>
      <pubDate>Sat, 11 Jan 2020 21:02:43 +0500</pubDate>
      
      <guid>https://yantonov.com/2020/01/2020-01-11-21-02-open_source_continuous_delivery_server_written_in_go_lang/</guid>
      <description>Here is the site of the project.
Custom pipelines can be defined as code.
source</description>
    </item>
    
  </channel>
</rss>
