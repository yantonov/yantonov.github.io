{"categories":[{"title":"computer science","uri":"https://yantonov.com/categories/computer-science/"},{"title":"misc","uri":"https://yantonov.com/categories/misc/"},{"title":"ops","uri":"https://yantonov.com/categories/ops/"},{"title":"podcast","uri":"https://yantonov.com/categories/podcast/"},{"title":"programming","uri":"https://yantonov.com/categories/programming/"},{"title":"statistics","uri":"https://yantonov.com/categories/statistics/"}],"posts":[{"content":"Here you can read about\n an excellent example of how to use git refs in practice. a nice way to track the experiments (ML related for example).  ","id":0,"section":"posts","summary":"Here you can read about\n an excellent example of how to use git refs in practice. a nice way to track the experiments (ML related for example).  ","tags":["mlops","vcs","scm","git"],"title":"Usecase for git refs","uri":"https://yantonov.com/post/2022-05-12-usecase-for-git-refs/","year":"2022"},{"content":"Interesting reading about link imbalance:\n Metastable Failures in Distributed Systems Solving the Mystery of Link Imbalance: A Metastable Failure State at Scale  ","id":1,"section":"posts","summary":"Interesting reading about link imbalance:\n Metastable Failures in Distributed Systems Solving the Mystery of Link Imbalance: A Metastable Failure State at Scale  ","tags":["data-structures"],"title":"Link imbalance","uri":"https://yantonov.com/post/2022-05-11-link-imbalance/","year":"2022"},{"content":"Here is a nice instruction how to migrate wsl to another drive.\nA couple of nuances:\n When you export the image there is no need to define the version of WSL. But for the import you should do it (if you use version 2 for example), by using the version parameter, otherwise, you will get a confusing error about an incorrect parameter. To define the default user you should use the command that may vary depending on the os version. For example, for Ubuntu 20.04 the command looks like ubuntu 2004, not ubuntu.  ","id":2,"section":"posts","summary":"Here is a nice instruction how to migrate wsl to another drive.\nA couple of nuances:\n When you export the image there is no need to define the version of WSL. But for the import you should do it (if you use version 2 for example), by using the version parameter, otherwise, you will get a confusing error about an incorrect parameter. To define the default user you should use the command that may vary depending on the os version.","tags":["windows","wsl"],"title":"Move WSL to another drive","uri":"https://yantonov.com/post/2022-04-07-move-wsl-to-another-drive/","year":"2022"},{"content":"Here is the list of general/algo/system design questions:\n coding-interview-university build-your-own-x tech-interview-handbook how-to-secure-anything javascript-algorithms how-web-works algorithms-javascript system-design-primer awesome-interview-questions olshansk-interview  Golang 11. learngo\nJavascript 12. clean-code-javascript 13. javascript-questions\nsource\n","id":3,"section":"posts","summary":"Here is the list of general/algo/system design questions:\n coding-interview-university build-your-own-x tech-interview-handbook how-to-secure-anything javascript-algorithms how-web-works algorithms-javascript system-design-primer awesome-interview-questions olshansk-interview  Golang 11. learngo\nJavascript 12. clean-code-javascript 13. javascript-questions\nsource","tags":["interview","algorithm","system design","nalsd"],"title":"Github repositories that help you to prepare for the next interview","uri":"https://yantonov.com/post/2021-10-04-github-repositories-that-help-you-to-prepare-for-the-next-interview/","year":"2021"},{"content":"Geometric deep learning course. This DL generalization allows transferring prior physical knowledge to NN architectures.\nBook at arxiv.org\nFull playlist (including tutorial and seminar records)\n","id":4,"section":"posts","summary":"Geometric deep learning course. This DL generalization allows transferring prior physical knowledge to NN architectures.\nBook at arxiv.org\nFull playlist (including tutorial and seminar records)","tags":["neural-netrowk","course"],"title":"Geometric deep learning","uri":"https://yantonov.com/post/2021-08-10-geometric-deep-learning/","year":"2021"},{"content":"Information for reflection :)\nHere is a nice Rust library that provides concepts of eventuals (observable snapshot of the most up-to-date value).\nJust check it and spend a couple of minutes to think about it.\n","id":5,"section":"posts","summary":"Information for reflection :)\nHere is a nice Rust library that provides concepts of eventuals (observable snapshot of the most up-to-date value).\nJust check it and spend a couple of minutes to think about it.","tags":["concurrency","observable","rx","ui","rust"],"title":"About rx observables","uri":"https://yantonov.com/post/2021-07-23-about-rx-observables/","year":"2021"},{"content":"Be careful while using Github actions for Windows.\nBy default Windows uses Powershell not bash, but you may prefer to explicitly choose bash as a shell.\nSee Github action documentation\nYou can find some details about using Powershell here\n","id":6,"section":"posts","summary":"Be careful while using Github actions for Windows.\nBy default Windows uses Powershell not bash, but you may prefer to explicitly choose bash as a shell.\nSee Github action documentation\nYou can find some details about using Powershell here","tags":["github","ci","windows","automation"],"title":"Github actions and windows","uri":"https://yantonov.com/post/2021-04-16-github-actions-and-windows/","year":"2021"},{"content":"Here is an example of flake8 plugin that prevents you from using numpy random fn.\nA nice example of analyzing a source code in python.\n","id":7,"section":"posts","summary":"Here is an example of flake8 plugin that prevents you from using numpy random fn.\nA nice example of analyzing a source code in python.","tags":["python"],"title":"Forbid using a function in python","uri":"https://yantonov.com/post/2021-04-12-forbid-using-a-function-in-python/","year":"2021"},{"content":"Aaaah! Today I faced a strange error message from docker.\n =\u0026gt; ERROR [internal] load metadata for docker.io/library/python:3.8-slim-buster 0.6s ------ \u0026gt; [internal] load metadata for docker.io/library/python:3.8-slim-buster: ------ failed to solve with frontend dockerfile.v0: failed to create LLB definition: rpc error: code = Unknown desc = error getting credentials - err: exec: \u0026quot;docker-credential-desktop.exe\u0026quot;: executable file not found in $PATH, out: `` Thanks to Bertrand C for the solution.\n In ~/.docker/config.json change credsStore to credStore Source\n","id":8,"section":"posts","summary":"Aaaah! Today I faced a strange error message from docker.\n =\u0026gt; ERROR [internal] load metadata for docker.io/library/python:3.8-slim-buster 0.6s ------ \u0026gt; [internal] load metadata for docker.io/library/python:3.8-slim-buster: ------ failed to solve with frontend dockerfile.v0: failed to create LLB definition: rpc error: code = Unknown desc = error getting credentials - err: exec: \u0026quot;docker-credential-desktop.exe\u0026quot;: executable file not found in $PATH, out: `` Thanks to Bertrand C for the solution.\n In ~/.docker/config.json change credsStore to credStore Source","tags":["docker","error"],"title":"Docker error: error getting credentials","uri":"https://yantonov.com/post/2021-03-06-docker-error-error-getting-credentials/","year":"2021"},{"content":"Here is an interesting article which explains another way to store dotfiles.\nIn a couple of words:\n store dotfiles into a git repository clone your git repository using a bare more and make working directory pointing to ${HOME} use dotfiles directly from the repository (without symbolic links)  The only disadvantage is that all dotfiles must be inside one repository. It is not scalable approach in that sense that typically configuration files for the different programs are splitted into multiple repositories. Using multiple repositories helps to effective share particular configurations.\nThat's why using symlinks and maybe some tools that simplifies the symlink creation are still the prefered approach for me.\nAnyway, it is interesting approach and can be useful in some cases.\n","id":9,"section":"posts","summary":"Here is an interesting article which explains another way to store dotfiles.\nIn a couple of words:\n store dotfiles into a git repository clone your git repository using a bare more and make working directory pointing to ${HOME} use dotfiles directly from the repository (without symbolic links)  The only disadvantage is that all dotfiles must be inside one repository. It is not scalable approach in that sense that typically configuration files for the different programs are splitted into multiple repositories.","tags":["dotfiles","configuration"],"title":"Serve dotfiles directly from a git repository","uri":"https://yantonov.com/post/2021-02-13-serve-dotfiles-directly-from-a-git-repository/","year":"2021"},{"content":"Interesting statistics about academic salaries\nSource\n","id":10,"section":"posts","summary":"Interesting statistics about academic salaries\nSource","tags":["economics","salary"],"title":"Academic salaries","uri":"https://yantonov.com/post/2020-12-15-academic-salaries/","year":"2020"},{"content":"If you faced with a sound problem (the sound just disappeared), and nothing helps (general troubleshooting, updating drivers, uninstalling audio devices etc, you can try to install Lenovo drivers.\nUnfortunately it is not easy to find exactly this drivers. (the link to them is located at the second page of the corresponding topic at Levono forums)\nSource (Lenovo forums page) link Drivers page (especially for 8th gen): link\n","id":11,"section":"posts","summary":"If you faced with a sound problem (the sound just disappeared), and nothing helps (general troubleshooting, updating drivers, uninstalling audio devices etc, you can try to install Lenovo drivers.\nUnfortunately it is not easy to find exactly this drivers. (the link to them is located at the second page of the corresponding topic at Levono forums)\nSource (Lenovo forums page) link Drivers page (especially for 8th gen): link","tags":["drivers","sound","audio","microphone","troubleshooting"],"title":"How to fix Lenovo X1 Carbon 8th gen sound problem on Windows 10","uri":"https://yantonov.com/post/2020-11-14-how-to-fix-lenovo-x1-carbon-8th-gen-sound-problem-on-windows-10/","year":"2020"},{"content":"Entity–component–system (ECS) is an architectural pattern that is mostly used in game development. Main points:\n every entity has unique id; every logic aspect is a component - raw data linked to the corresponding entity by id; system performs actions on entities having corresponding aspects/components; diffenent components can be stored separately; systems can track entities by using observer pattern.  More details can be found here.\n","id":12,"section":"posts","summary":"Entity–component–system (ECS) is an architectural pattern that is mostly used in game development. Main points:\n every entity has unique id; every logic aspect is a component - raw data linked to the corresponding entity by id; system performs actions on entities having corresponding aspects/components; diffenent components can be stored separately; systems can track entities by using observer pattern.  More details can be found here.","tags":["design","composition","enheritance","gamedev","architecture"],"title":"Entity component system","uri":"https://yantonov.com/post/2020-10-31-entity-component-system/","year":"2020"},{"content":"Here is another approach to pass dependencies through deep call stack.\nIn a couple of words:\n deeply nested code not executes immediately but returns a function for the later lazy evaluation; the correponding function accepts the required environment; at the top level call the function returned from the nested code and pass the environment to it. Documentation.  ","id":13,"section":"posts","summary":"Here is another approach to pass dependencies through deep call stack.\nIn a couple of words:\n deeply nested code not executes immediately but returns a function for the later lazy evaluation; the correponding function accepts the required environment; at the top level call the function returned from the nested code and pass the environment to it. Documentation.  ","tags":["dependency","context"],"title":"About passing dependencies through deep call stack","uri":"https://yantonov.com/post/2020-10-30-about-passing-dependencies-through-deep-call-stack/","year":"2020"},{"content":"Interesting and promissing approach to reduce number of samples during learning NN.\nArxiv link.\n","id":14,"section":"posts","summary":"Interesting and promissing approach to reduce number of samples during learning NN.\nArxiv link.","tags":["machine learning"],"title":"Leaning n classes from m \u003c n samples","uri":"https://yantonov.com/post/2020-10-24-leaning-n-classes-from-m-n-samples/","year":"2020"},{"content":"A couple of repositories which helps to send voice message to yandex station.\nUnfortunately it is impossible to do it using official api.\n yashhik yandexstation  ","id":15,"section":"posts","summary":"A couple of repositories which helps to send voice message to yandex station.\nUnfortunately it is impossible to do it using official api.\n yashhik yandexstation  ","tags":["alice","yandex","station","api","notification"],"title":"Send notification to yandex station","uri":"https://yantonov.com/post/2020-09-20-send-notification-to-yandex-station/","year":"2020"},{"content":"tmpmail - command line tool which allows to create temporary mailbox and receive emails from the terminal.\nIt uses 1secmail as a backend.\nSpend a couple of minutes to read concise, clean bash code.\n","id":16,"section":"posts","summary":"tmpmail - command line tool which allows to create temporary mailbox and receive emails from the terminal.\nIt uses 1secmail as a backend.\nSpend a couple of minutes to read concise, clean bash code.","tags":["email","cli","terminal","command line","shell","automation","tool"],"title":"Temporary email from command line","uri":"https://yantonov.com/post/2020-09-15-temporary-email-from-command-line/","year":"2020"},{"content":"Interesting article which explains the benefits of inlining labels inside form elements.\nsource\n","id":17,"section":"posts","summary":"Interesting article which explains the benefits of inlining labels inside form elements.\nsource","tags":["ux","form","interface"],"title":"About form labels","uri":"https://yantonov.com/post/2020-09-13-about-form-labels/","year":"2020"},{"content":"Great article \u0026ldquo;A hygienic Python setup for Linux, Mac, and WSL\u0026rdquo; about python's packages installation and creating clean and reproducible enviroment.\nIn a couple of words:\n pyenv to control python interpreter version pipenv / poetry to control virtual environment settings. pipx to install python cli tools.  Thanks Angela Bassa for the article's link.\n","id":18,"section":"posts","summary":"Great article \u0026ldquo;A hygienic Python setup for Linux, Mac, and WSL\u0026rdquo; about python's packages installation and creating clean and reproducible enviroment.\nIn a couple of words:\n pyenv to control python interpreter version pipenv / poetry to control virtual environment settings. pipx to install python cli tools.  Thanks Angela Bassa for the article's link.","tags":["python","environment","setup","install"],"title":"Clean python setup","uri":"https://yantonov.com/post/2020-09-03-clean-python-setup/","year":"2020"},{"content":"Free book about webRTC.\nGithub repository\n","id":19,"section":"posts","summary":"Free book about webRTC.\nGithub repository","tags":["book","webrtc","web"],"title":"WebRTC for the curious","uri":"https://yantonov.com/post/2020-08-31-webrtc-for-the-curious/","year":"2020"},{"content":"Here is nice go library named \u0026lsquo;moq\u0026rsquo; that helps you to easily test dependent code but without verbose mocks setup.\nThe idea is to generate trivial implementations and just save all the calls as a list preserving all the arguments.\nUsing this you can simply assert all the invariants and stop to write long mock setup.\n","id":20,"section":"posts","summary":"Here is nice go library named \u0026lsquo;moq\u0026rsquo; that helps you to easily test dependent code but without verbose mocks setup.\nThe idea is to generate trivial implementations and just save all the calls as a list preserving all the arguments.\nUsing this you can simply assert all the invariants and stop to write long mock setup.","tags":["stub","mock","test","tdd","go","golang"],"title":"Nice alternative to mocks, generate stub implementation","uri":"https://yantonov.com/post/2020-08-27-nice-alternative-to-mocks-generate-stub-implementation/","year":"2020"},{"content":"Here is a collection of typescript libraries for a various scenarios (functional programming, data structrures, various helpers, ui tools, canvas helpers and many others)..\nIt a great example of granular libraries with clean code.\ndefinitely it can be used in production, and moreover this is an excellent bunch of examples to learn typescript.\nP.s. Thanks Vahid Kazemi for the link.\n","id":21,"section":"posts","summary":"Here is a collection of typescript libraries for a various scenarios (functional programming, data structrures, various helpers, ui tools, canvas helpers and many others)..\nIt a great example of granular libraries with clean code.\ndefinitely it can be used in production, and moreover this is an excellent bunch of examples to learn typescript.\nP.s. Thanks Vahid Kazemi for the link.","tags":["typescript","fp","library"],"title":"Umbrella","uri":"https://yantonov.com/post/2020-08-23-umbrella/","year":"2020"},{"content":"Here is a great article about rust module system.\nSource\n","id":22,"section":"posts","summary":"Here is a great article about rust module system.\nSource","tags":["rust"],"title":"Rust module system","uri":"https://yantonov.com/post/2020-08-22-rust-module-system/","year":"2020"},{"content":"Recently I had a look at tofu library.\nInitially it seems this library provides granular typeclasses which provides developer to implement high level logic and substitute corresponding lower level implementation as proposed by tagless final approach.\nBut env module, for example looks overcomplicated but tecnhically provides reader monad. Definitely this is an acceptable approach, but it seems that monix task dependency introduce all this complexity. Why env contains any side effect specifics?\nIt is possible to remain all concurrent specifics (functions that loads values) at a high level, and manipilate only with pure values inside env monad. The idea is to split loading configuration and store of pure values (env in that case is just a wrap of this store). Even if some values may change or can be reloaded all this loading mechanics may be implemented outside the entity that just stores current values. In that case env may provide just an implicit context (that is the main goal of reader monad) and all side effects and error handling may be moved to high level (outside the env monad, and implemented in any way and not necessarily based on monix tasks).\n","id":23,"section":"posts","summary":"Recently I had a look at tofu library.\nInitially it seems this library provides granular typeclasses which provides developer to implement high level logic and substitute corresponding lower level implementation as proposed by tagless final approach.\nBut env module, for example looks overcomplicated but tecnhically provides reader monad. Definitely this is an acceptable approach, but it seems that monix task dependency introduce all this complexity. Why env contains any side effect specifics?","tags":["tagless final","scala","monad"],"title":"Tofu","uri":"https://yantonov.com/post/2020-08-22-tofu/","year":"2020"},{"content":"There are some options to control application memory consumption.\nDocker has a couple of flags to control application inside the container.\n \u0026ndash;memory flag defines non swap memory limit \u0026ndash;memory-swap flag defines total memory limit (swap + non swap memory) Details can be found here  Moreover, there is a cgroups limit at the os level. To check it\ncat /sys/fs/cgroup/memory/memory.limit_in_bytes When you try to check is, in some situations you can see some huge magic number\ncat /sys/fs/cgroup/memory/memory.limit_in_bytes 9223372036854771712 This is a maximum 64-bit signed integer rounded to the nearest page Source\n","id":24,"section":"posts","summary":"There are some options to control application memory consumption.\nDocker has a couple of flags to control application inside the container.\n \u0026ndash;memory flag defines non swap memory limit \u0026ndash;memory-swap flag defines total memory limit (swap + non swap memory) Details can be found here  Moreover, there is a cgroups limit at the os level. To check it\ncat /sys/fs/cgroup/memory/memory.limit_in_bytes When you try to check is, in some situations you can see some huge magic number","tags":["docker","memory","limit","ops"],"title":"Docker memory limit","uri":"https://yantonov.com/post/2020-03-30-docker-memory-limit/","year":"2020"},{"content":"There is a nice python library addict which is interesting for a couple of reasons.\nFirst of all, it simplifies creating a nested dictionary (see readme).\nSecondly, it represents an another nice example of using python magic methods.\n","id":25,"section":"posts","summary":"There is a nice python library addict which is interesting for a couple of reasons.\nFirst of all, it simplifies creating a nested dictionary (see readme).\nSecondly, it represents an another nice example of using python magic methods.","tags":["python","library"],"title":"Addict","uri":"https://yantonov.com/post/2020-03-01-addict/","year":"2020"},{"content":"There is interesting end-to-end delay-based congestion control algorithm Copa.\nHere you can find the details.\nFacebook tried to use it and results seem very promising.\n","id":26,"section":"posts","summary":"There is interesting end-to-end delay-based congestion control algorithm Copa.\nHere you can find the details.\nFacebook tried to use it and results seem very promising.","tags":["network","tcp","congestion control","algo"],"title":"Copa","uri":"https://yantonov.com/post/2020-02-27-copa/","year":"2020"},{"content":"Let's suppose you want to format flash drive but while you are trying to start formatting you see an error like this \u0026lsquo;The driver descriptor says the physical block size is 2048 bytes, but Linux says it is 512 bytes\u0026rsquo;.\nMoreover, partitions can not be removed using neigher gnome disk nor gparted.\nIn that case you can use fdisk with privileged access:\nfdisk /dev/sdX To show partition you can use \u0026lsquo;p\u0026rsquo; command, to remove partition - \u0026lsquo;q\u0026rsquo; command.\nAfher that flash drive can be normalized like this:\ndd if=/dev/zero of=/dev/sdX bs=512 count=1 Be careful with sdX notation, check it twise before run any such command.\n","id":27,"section":"posts","summary":"Let's suppose you want to format flash drive but while you are trying to start formatting you see an error like this \u0026lsquo;The driver descriptor says the physical block size is 2048 bytes, but Linux says it is 512 bytes\u0026rsquo;.\nMoreover, partitions can not be removed using neigher gnome disk nor gparted.\nIn that case you can use fdisk with privileged access:\nfdisk /dev/sdX To show partition you can use \u0026lsquo;p\u0026rsquo; command, to remove partition - \u0026lsquo;q\u0026rsquo; command.","tags":["flash","error","linux"],"title":"Fix flash drive block size","uri":"https://yantonov.com/post/2020-02-26-fix-flash-drive-block-size/","year":"2020"},{"content":"Here is the site of the project.\nCustom pipelines can be defined as code.\nsource\n","id":28,"section":"posts","summary":"Here is the site of the project.\nCustom pipelines can be defined as code.\nsource","tags":["ci","cd","continuous delivery","deploy"],"title":"Open source continuous delivery server written in go lang","uri":"https://yantonov.com/post/2020-01-11-open-source-continuous-delivery-server-written-in-go-lang/","year":"2020"},{"content":"Here is the library that allows you to call python code from clojure.\n","id":29,"section":"posts","summary":"Here is the library that allows you to call python code from clojure.","tags":["jvm","python","clojure"],"title":"Bridge from clojure to python","uri":"https://yantonov.com/post/2020-01-11-bridge-from-clojure-to-python/","year":"2020"},{"content":"Here is the description of a bunch of JVM's flags and some recommendations how to use them.\n","id":30,"section":"posts","summary":"Here is the description of a bunch of JVM's flags and some recommendations how to use them.","tags":["jvm","performance"],"title":"JVM tuning guidelines","uri":"https://yantonov.com/post/2020-01-11-jvm-tuning-guidelines/","year":"2020"},{"content":"A couple of links about commit convensions:\n commit generator Convensional commit specification  ","id":31,"section":"posts","summary":"A couple of links about commit convensions:\n commit generator Convensional commit specification  ","tags":["commit"],"title":"Commit convensions","uri":"https://yantonov.com/post/2020-01-02-commit-convensions/","year":"2020"},{"content":"Here is nice collection of 8-bit ui controls.\nFramework based on css, so you can used it with any js code.\nSource.\n","id":32,"section":"posts","summary":"Here is nice collection of 8-bit ui controls.\nFramework based on css, so you can used it with any js code.\nSource.","tags":["css","design","library"],"title":"8 bit css nes style framework","uri":"https://yantonov.com/post/2019-12-29-8-bit-css-nes-style-framework/","year":"2019"},{"content":"Here are some instructions which help you decrease rust binary size.\n","id":33,"section":"posts","summary":"Here are some instructions which help you decrease rust binary size.","tags":["rust","deploy"],"title":"How to decrease rust binary size","uri":"https://yantonov.com/post/2019-12-29-how-to-decrease-rust-binary-size/","year":"2019"},{"content":"Want to read about distributed consensus? Here is a great resource list about consensus in distributed systems, created by Heidi Howard.\n","id":34,"section":"posts","summary":"Want to read about distributed consensus? Here is a great resource list about consensus in distributed systems, created by Heidi Howard.","tags":["distributed systems","consensus","paxos","algorithm"],"title":"Distributed consensus","uri":"https://yantonov.com/post/2019-12-22-distributed-consensus/","year":"2019"},{"content":"Resilience4j is a lightweight fault tolerance library which provides higher-order functions to enhance any functional interface, lambda expression or method reference with a Circuit Breaker, Rate Limiter, Retry or Bulkhead.\nNice example of functional composition with pragmatic library with minimum number of dependencies.\n","id":35,"section":"posts","summary":"Resilience4j is a lightweight fault tolerance library which provides higher-order functions to enhance any functional interface, lambda expression or method reference with a Circuit Breaker, Rate Limiter, Retry or Bulkhead.\nNice example of functional composition with pragmatic library with minimum number of dependencies.","tags":["microservice","fault tolerance","jvm"],"title":"Resilience4j","uri":"https://yantonov.com/post/2019-12-22-resilience4j/","year":"2019"},{"content":"Here is an interesting article \u0026lsquo;Stacked Diffs Versus Pull Requests\u0026rsquo; written by Jackson Gabbard.\nImportant note about the quality of the codebase (in context of stacked diff, i.e. trunk based development):\n In this model, every commit must pass lint. It must pass unit tests. It must build. Every commit should have a test plan. A description. A meaningful title. Every. Single. Commit. This level of discipline means the code quality bar is fundamentally higher than the Pull Request world\u0026hellip; I didn't think a lot about it before, but it definitely seems realistic.\n Overall, it seems that comparison of these two models (stacked diffs and pull requests) is more about task granularity (which is convenient by itself) and useful tooling (in terms of minimization manual mechanics). In any case, any commit/PR must be reviewed, so it doesn't matter whether you create branch, or squash some local diff on top of master.\n","id":36,"section":"posts","summary":"Here is an interesting article \u0026lsquo;Stacked Diffs Versus Pull Requests\u0026rsquo; written by Jackson Gabbard.\nImportant note about the quality of the codebase (in context of stacked diff, i.e. trunk based development):\n In this model, every commit must pass lint. It must pass unit tests. It must build. Every commit should have a test plan. A description. A meaningful title. Every. Single. Commit. This level of discipline means the code quality bar is fundamentally higher than the Pull Request world\u0026hellip; I didn't think a lot about it before, but it definitely seems realistic.","tags":["scm","vcs","trunk"],"title":"Stacked diffs versus pull requests","uri":"https://yantonov.com/post/2019-12-21-stacked-diffs-versus-pull-requests/","year":"2019"},{"content":"Nice tool to control and monitoring cache state.\nSource\n","id":37,"section":"posts","summary":"Nice tool to control and monitoring cache state.\nSource","tags":["cache","unix","linux","performance"],"title":"Portable file system cache diagnostics and control","uri":"https://yantonov.com/post/2019-12-20-portable-file-system-cache-diagnostics-and-control/","year":"2019"},{"content":"The 2020 State of Enterprise Machine Learning report\ndownload\n","id":38,"section":"posts","summary":"The 2020 State of Enterprise Machine Learning report\ndownload","tags":["machine learning"],"title":"State of enterprise ML","uri":"https://yantonov.com/post/2019-12-19-state-of-enterprise-ml/","year":"2019"},{"content":"A couple of articles about distributed transactions and scalability:\n  Online Event Processing Achieving consistency where distributed transactions have failed [link]\nwritten by Martin Kleppmann [twitter], Alastair R. Beresford [twitter], and Boerge Svingen [twitter]\n  Life beyond Distributed Transactions: an Apostate’s Opinion [link]\nwritten by Pat Helland [twitter]\n  ","id":39,"section":"posts","summary":"A couple of articles about distributed transactions and scalability:\n  Online Event Processing Achieving consistency where distributed transactions have failed [link]\nwritten by Martin Kleppmann [twitter], Alastair R. Beresford [twitter], and Boerge Svingen [twitter]\n  Life beyond Distributed Transactions: an Apostate’s Opinion [link]\nwritten by Pat Helland [twitter]\n  ","tags":["distributed systems","scalability"],"title":"About distributed transactions","uri":"https://yantonov.com/post/2019-12-19-about-distributed-transactions/","year":"2019"},{"content":"Got tired to enter ssh passphrases on mac os and want to know how easily force ssh-agent to remember ssh keys?\nAdd this snippet to ~/.ssh/config file:\nHost * AddKeysToAgent yes UseKeychain yes Source\n","id":40,"section":"posts","summary":"Got tired to enter ssh passphrases on mac os and want to know how easily force ssh-agent to remember ssh keys?\nAdd this snippet to ~/.ssh/config file:\nHost * AddKeysToAgent yes UseKeychain yes Source","tags":["mac","ssh","terminal","automation"],"title":"How to remember ssh keys on mac os","uri":"https://yantonov.com/post/2019-12-15-how-to-remember-ssh-keys-on-mac-os/","year":"2019"},{"content":"Simple probabilistic data structure used to count distinct values.\nsource\n","id":41,"section":"posts","summary":"Simple probabilistic data structure used to count distinct values.\nsource","tags":["probability","data structures","algorithm"],"title":"K-Minimum values sketch","uri":"https://yantonov.com/post/2019-06-15-k-minimum-values-sketch/","year":"2019"},{"content":"Here is html version of Simon Marlow's book \u0026lsquo;Parallel and Concurrent Programming in Haskell\u0026rsquo;.\n","id":42,"section":"posts","summary":"Here is html version of Simon Marlow's book \u0026lsquo;Parallel and Concurrent Programming in Haskell\u0026rsquo;.","tags":["haskell","concurrency","parallel"],"title":"Parallel and concurrenct programming in haskell","uri":"https://yantonov.com/post/2017-12-13-parallel-and-concurrenct-programming-in-haskell/","year":"2017"},{"content":"Slides and videos from the Velocity conference 2017.\n","id":43,"section":"posts","summary":"Slides and videos from the Velocity conference 2017.","tags":null,"title":"Velocity conference 2017","uri":"https://yantonov.com/post/2017-12-08-velocity-conference-2017/","year":"2017"},{"content":"Not enough watchers Verify that if you have enough available watchers in your system. If this value is too low, the file watcher in Webpack won’t recognize the changes:\ncat /proc/sys/fs/inotify/max_user_watches Arch users, add fs.inotify.max_user_watches=524288 to /etc/sysctl.d/99-sysctl.conf and then execute sysctl \u0026ndash;system.\nUbuntu users (and possibly others):\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf \u0026amp;\u0026amp; sudo sysctl -p Source\n","id":44,"section":"posts","summary":"Not enough watchers Verify that if you have enough available watchers in your system. If this value is too low, the file watcher in Webpack won’t recognize the changes:\ncat /proc/sys/fs/inotify/max_user_watches Arch users, add fs.inotify.max_user_watches=524288 to /etc/sysctl.d/99-sysctl.conf and then execute sysctl \u0026ndash;system.\nUbuntu users (and possibly others):\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf \u0026amp;\u0026amp; sudo sysctl -p Source","tags":["web","webpack","watch","watchers"],"title":"Webpack has not enough watchers","uri":"https://yantonov.com/post/2017-09-13-webpack-has-not-enough-watchers/","year":"2017"},{"content":"Papers from CVRP 2017\n","id":45,"section":"posts","summary":"Papers from CVRP 2017","tags":["pattern recognition","computer vision"],"title":"CVRP 2017 Papers","uri":"https://yantonov.com/post/2017-08-16-cvrp-2017-papers/","year":"2017"},{"content":"[https://arxiv.org/abs/1410.5401](Neural Turing Machines)\n We extend the capabilities of neural networks by coupling them to external memory resources, which they can interact with by attentional processes. The combined system is analogous to a Turing Machine or Von Neumann architecture but is differentiable end-to-end, allowing it to be efficiently trained with gradient descent. Preliminary results demonstrate that Neural Turing Machines can infer simple algorithms such as copying, sorting, and associative recall from input and output examples.\n ","id":46,"section":"posts","summary":"[https://arxiv.org/abs/1410.5401](Neural Turing Machines)\n We extend the capabilities of neural networks by coupling them to external memory resources, which they can interact with by attentional processes. The combined system is analogous to a Turing Machine or Von Neumann architecture but is differentiable end-to-end, allowing it to be efficiently trained with gradient descent. Preliminary results demonstrate that Neural Turing Machines can infer simple algorithms such as copying, sorting, and associative recall from input and output examples.","tags":["neural network","memory"],"title":"Neural turing machines","uri":"https://yantonov.com/post/2017-05-03-neural-turing-machines/","year":"2017"},{"content":"Write css rules with lispy syntax using lass.\n","id":47,"section":"posts","summary":"Write css rules with lispy syntax using lass.","tags":["lisp","css"],"title":"Lispy css","uri":"https://yantonov.com/post/2017-04-13-lispy-css/","year":"2017"},{"content":"Concise explanation of Kalman filter\n","id":48,"section":"posts","summary":"Concise explanation of Kalman filter","tags":["kalman filter","algorithm"],"title":"kalman filter","uri":"https://yantonov.com/post/2017-03-22-kalman-filter/","year":"2017"},{"content":"List{:target=\u0026rdquo;_blank\u0026rdquo;} of functional programming related podcasts. Happy listening!\n","id":49,"section":"posts","summary":"List{:target=\u0026rdquo;_blank\u0026rdquo;} of functional programming related podcasts. Happy listening!","tags":["podcast","fprog"],"title":"functional programming related podcasts","uri":"https://yantonov.com/post/2017-01-21-functional-programming-related-podcasts/","year":"2017"},{"content":"This tiny blog has just been migrated from octropress to hugo.\nPros:\n service code and content (blog posts) are not mixed easy installation and configuration/customization process no more any troubles with ruby (on mac in particular) speed  Generator is written in go lang :-), maybe for someone this is an additional argument.\nCons: \u0026hellip; cant see, at least now\nGood day!\n","id":50,"section":"posts","summary":"This tiny blog has just been migrated from octropress to hugo.\nPros:\n service code and content (blog posts) are not mixed easy installation and configuration/customization process no more any troubles with ruby (on mac in particular) speed  Generator is written in go lang :-), maybe for someone this is an additional argument.\nCons: \u0026hellip; cant see, at least now\nGood day!","tags":["blog","static"],"title":"Bye octopress, hello hugo","uri":"https://yantonov.com/post/2017-01-06-bye-octopress-hello-hugo/","year":"2017"},{"content":"During matplotlib installation (for python3) some error may occured:\n\u0026lsquo;The following required packages can not be built:\n freetype png\u0026rsquo;  Thats why some additional steps may be required:\n  install homebrew\n  install pkg-config\n  brew install pkg-config install freetype  brew install freetype install matplotlib  pip3 install matplotlib Enjoy!\n","id":51,"section":"posts","summary":"During matplotlib installation (for python3) some error may occured:\n\u0026lsquo;The following required packages can not be built:\n freetype png\u0026rsquo;  Thats why some additional steps may be required:\n  install homebrew\n  install pkg-config\n  brew install pkg-config install freetype  brew install freetype install matplotlib  pip3 install matplotlib Enjoy!","tags":["python","matplotlib","mac"],"title":"Install matplotlib on mac sierra","uri":"https://yantonov.com/post/2017-01-05-install-matplotlib-on-mac-sierra/","year":"2017"},{"content":"Problem: its impossible to connect to hidden wifi network (connect button is disabled) Solution: execute in terminal (where sid - wifi network id):\nnmcli c up id \u0026lt;sid\u0026gt; bug status\n","id":52,"section":"posts","summary":"Problem: its impossible to connect to hidden wifi network (connect button is disabled) Solution: execute in terminal (where sid - wifi network id):\nnmcli c up id \u0026lt;sid\u0026gt; bug status","tags":["ubuntu","wifi","connection","problem"],"title":"Can not connect to hidden wifi (ubuntu 16.04 lts)","uri":"https://yantonov.com/post/2016-12-10-can-not-connect-to-hidden-wifi-ubuntu-16.04-lts/","year":"2016"},{"content":"Excellent article which shows how to apply pareto rule for caching strategies.\n","id":53,"section":"posts","summary":"Excellent article which shows how to apply pareto rule for caching strategies.","tags":["cache","algorithm","caching"],"title":"2Q a low overhead high performance buffer managemenent replacement algorithm","uri":"https://yantonov.com/post/2016-07-31-2q-a-low-overhead-high-performance-buffer-managemenent-replacement-algorithm/","year":"2016"},{"content":"There is a really puzzling behaviour in Nautilus regarding my Shift key. Consider the following scenario:\n Choose any file to rename During renaming i can type just fine unless i need a capital letter. If i type a capital letter (using shift) then focus shifts to some file at the same folder.  Clarification: Current shortcut to change layout LShift+RShift.\nSolution: Change shortcut to, for example, LCtrl + LShift (System Settings -\u0026gt; Text Entry)and the problem disappears.\n","id":54,"section":"posts","summary":"There is a really puzzling behaviour in Nautilus regarding my Shift key. Consider the following scenario:\n Choose any file to rename During renaming i can type just fine unless i need a capital letter. If i type a capital letter (using shift) then focus shifts to some file at the same folder.  Clarification: Current shortcut to change layout LShift+RShift.\nSolution: Change shortcut to, for example, LCtrl + LShift (System Settings -\u0026gt; Text Entry)and the problem disappears.","tags":["ubuntu","shortcut","keyboard","nautilus"],"title":"Strange shift key behaviour when renaming files in ubuntu","uri":"https://yantonov.com/post/2016-05-10-strange-shift-key-behaviour-when-renaming-files-in-ubuntu/","year":"2016"},{"content":"Has just migrated all my mercurial repositories to git. Its a little bit sad, but it will increase uniformity. More over there is gitlab which provides free private repositories as well as bitbucket.\nP.s. here is a simple script aimed to convert hg repo to git,\nmaybe it will be helpful\n","id":55,"section":"posts","summary":"Has just migrated all my mercurial repositories to git. Its a little bit sad, but it will increase uniformity. More over there is gitlab which provides free private repositories as well as bitbucket.\nP.s. here is a simple script aimed to convert hg repo to git,\nmaybe it will be helpful","tags":["mercurial","git","vcs","scm"],"title":"Bye bye mercurial","uri":"https://yantonov.com/post/2016-03-12-bye-bye-mercurial/","year":"2016"},{"content":"Sometimes you may want to delete some package (*.pkg) from your Mac OS installaction. Its assumed, you dont have uninstaller.\nThere is no official way to uninstall package, but you can do it manually using \u0026lsquo;pkgutil\u0026rsquo; tool. There is some articles (you can google it) which described the process.\nTo automate the process i have wrote this script uninstall-pkg.sh\n#!/bin/sh  # this script allow you to uninstall given pkg file # ATTENTIONS! # all delete operation are interactive, but in any way # USE THIS SCRIPT FOR YOUR OWN RISK SCRIPT=`basename $0` WD=`pwd` PACKAGE_NAME=$1 if [ -z \u0026#34;$PACKAGE_NAME\u0026#34; ]; then echo \u0026#34;[ERROR] - package is not defined\u0026#34; echo \u0026#34;Usage: $SCRIPT\u0026lt;package-name\u0026gt;\u0026#34; exit 0 fi installed_packages=`pkgutil --pkgs | grep $PACKAGE_NAME` if [ -z \u0026#34;$installed_packages\u0026#34; ]; then echo \u0026#34;[ERROR] - package \u0026#39;$PACKAGE_NAME\u0026#39; not found\u0026#34; exit 0 fi for p in `pkgutil --pkgs | grep $PACKAGE_NAME`; do echo \u0026#34;Delete package: \u0026#39;$p\u0026#39; [y/n/other key to break] ?:\u0026#34; read -n 1 selection echo \u0026#34;\u0026#34; case \u0026#34;$selection\u0026#34; in y) echo \u0026#34;[INFO] - Process package: \u0026#39;$p\u0026#39;\u0026#34; volume=`pkgutil --pkg-info $p | grep -E \u0026#39;volume:\u0026#39; | cut -d \u0026#39; \u0026#39; -f 2` location=`pkgutil --pkg-info $p | grep -E \u0026#39;location:\u0026#39; | cut -d \u0026#39; \u0026#39; -f 2` package_path=\u0026#34;$volume$location\u0026#34; echo \u0026#39;[INFO] - Go to package install location: $package_path\u0026#39; cd $package_path echo \u0026#39;[INFO] - Iterate package files:\u0026#39; for f in `pkgutil --only-files --files $p`; do echo \u0026#39;Delete file: \u0026#39;$f\u0026#39; ? [y/n/other key to skip package]:\u0026#39; read -n 1 file_cmd echo \u0026#34;\u0026#34; case \u0026#34;$file_cmd\u0026#34; in y) sudo rm -i $f echo \u0026#34;[INFO] - file \u0026#39;$f\u0026#39; deleted.\u0026#34; ;; n) echo \u0026#34;[INFO] - file \u0026#39;$f\u0026#39; skipped\u0026#34; ;; *) echo \u0026#34;[INFO] - skip all files in package \u0026#39;$p\u0026#39;\u0026#34; break ;; esac done ;; n) echo \u0026#39;[INFO] - ok, i will skip package \u0026#39;%p\u0026#39;\u0026#39; ;; *) echo \u0026#39;[INFO] - quit\u0026#39; exit 0 ;; esac done cd $WD source\nAll delete operation are interactive, but be carefull and use it for your own risk.\n","id":56,"section":"posts","summary":"Sometimes you may want to delete some package (*.pkg) from your Mac OS installaction. Its assumed, you dont have uninstaller.\nThere is no official way to uninstall package, but you can do it manually using \u0026lsquo;pkgutil\u0026rsquo; tool. There is some articles (you can google it) which described the process.\nTo automate the process i have wrote this script uninstall-pkg.sh\n#!/bin/sh  # this script allow you to uninstall given pkg file # ATTENTIONS!","tags":["mac","package","automation","shell","script"],"title":"Delete package from Mac OS","uri":"https://yantonov.com/post/2015-10-14-delete-package-from-mac-os/","year":"2015"},{"content":"List of papers on distributed systems\n","id":57,"section":"posts","summary":"List of papers on distributed systems","tags":["distributed systems","links"],"title":"Distributed systems papers","uri":"https://yantonov.com/post/2015-10-01-distributed-systems-papers/","year":"2015"},{"content":"Videos  Deep Learning and Neural Networks with Kevin Duh: course page NY Course by Yann LeCun: 2014 version, 2015 version ICML 2013 Deep Learning Tutorial by Yann Lecun (slides) Geoffery Hinton’s cousera course on Neural Networks for Machine Learning Large Scale Visual Recognition Challenge 2014, arxiv paper GTC Deep Learning 2015 Hugo Larochelle Neural Networks [class[(https://www.youtube.com/playlist?list=PL6Xpj9I5qXYEcOhn7TqghAJ6NAPrNmUBH), slides My youtube playlist Yaser Abu-Mostafa’s Learning from Data course (youtube playlist) Stanford CS224d: Deep Learning for Natural Language Processing: syllabus, youtube playlist, reddit Neural Networks for Machine Perception: vimeo Deep Learning for NLP (without magic): page, better page, video1, video2, youtube playlist Introduction to Deep Learning with Python: video, slides, code Machine Learning course with emphasis on Deep Learning by Nando de Freitas (youtube playlist), course page, torch practicals NIPS 2013 Deep Learning for Computer Vision Tutorial – Rob Fergus: video, slides  Links  Deeplearning.net NVidia’s Deep Learning portal  Books  Learning Deep Architectures for AI, Bengio (pdf) Neural Nets and Deep Learning (html, github) Deep Learning, Bengio, Goodfellow, Courville (html) Neural Nets and Learning Machines, Haykin, 2008 (amazon)  Papers  ImageNet Classification with Deep Convolutional Neural Networks, Alex Krizhevsky, Ilya Sutskever, Geoffrey E Hinton, NIPS 2012 (paper) Why does unsupervised pre-training help deep learning? (paper) Hinton06 – Autoencoders (paper) Deep Learning using Linear Support Vector machines (paper)  Source contains additional materials.\n","id":58,"section":"posts","summary":"Videos  Deep Learning and Neural Networks with Kevin Duh: course page NY Course by Yann LeCun: 2014 version, 2015 version ICML 2013 Deep Learning Tutorial by Yann Lecun (slides) Geoffery Hinton’s cousera course on Neural Networks for Machine Learning Large Scale Visual Recognition Challenge 2014, arxiv paper GTC Deep Learning 2015 Hugo Larochelle Neural Networks [class[(https://www.youtube.com/playlist?list=PL6Xpj9I5qXYEcOhn7TqghAJ6NAPrNmUBH), slides My youtube playlist Yaser Abu-Mostafa’s Learning from Data course (youtube playlist) Stanford CS224d: Deep Learning for Natural Language Processing: syllabus, youtube playlist, reddit Neural Networks for Machine Perception: vimeo Deep Learning for NLP (without magic): page, better page, video1, video2, youtube playlist Introduction to Deep Learning with Python: video, slides, code Machine Learning course with emphasis on Deep Learning by Nando de Freitas (youtube playlist), course page, torch practicals NIPS 2013 Deep Learning for Computer Vision Tutorial – Rob Fergus: video, slides  Links  Deeplearning.","tags":["deep learning","ai","course","book","article","research"],"title":"Deep learning resouces","uri":"https://yantonov.com/post/2015-09-13-deep-learning-resouces/","year":"2015"},{"content":"CRDT reading list\n","id":59,"section":"posts","summary":"CRDT reading list","tags":["crdt"],"title":"Crdt reading list","uri":"https://yantonov.com/post/2015-08-02-crdt-reading-list/","year":"2015"},{"content":"Mike Vanier wrote great article about Y-combinator.\n","id":60,"section":"posts","summary":"Mike Vanier wrote great article about Y-combinator.","tags":["lambda calculus","fprog","types"],"title":"Y combinator","uri":"https://yantonov.com/post/2015-06-07-y-combinator/","year":"2015"},{"content":"Another Rich Hickey's great talk about functional composition in general and transducers in particular.\n","id":61,"section":"posts","summary":"Another Rich Hickey's great talk about functional composition in general and transducers in particular.","tags":null,"title":"Functional composition and transducers","uri":"https://yantonov.com/post/2015-04-12-functional-composition-and-transducers/","year":"2015"},{"content":"Course Project Reports\n","id":62,"section":"posts","summary":"Course Project Reports","tags":["ai","neural network","machine learning","course"],"title":"CS231n Convolutional neural networks for visual recognition","uri":"https://yantonov.com/post/2015-03-29-cs231n-convolutional-neural-networks-for-visual-recognition/","year":"2015"},{"content":"Final Projects 2012\nFinal Projects 2013\nFinal Projects 2014\n","id":63,"section":"posts","summary":"Final Projects 2012\nFinal Projects 2013\nFinal Projects 2014","tags":["machine learning","ai","project","course"],"title":"CS229 Machine Learning","uri":"https://yantonov.com/post/2015-03-29-cs229-machine-learning/","year":"2015"},{"content":"Foreword : Inspired by excellent post\nInitial task: creating notification every 20 minutes can be decomposed into two parts:\n create notification scheduled launch  First subtask can be solved using this trivial script.\nstandup.sh:\n#!/bin/sh  # stand up notification osascript -e \u0026#39;display notification \u0026#34;Stand up\u0026#34; with title \u0026#34;Healthy programmer\u0026#34;\u0026#39; say \u0026#34;Stand up\u0026#34; Second subtask (scheduled launch) can be solved using: daemon and agent mechanism.\nCreate file: com.example.stand.up.plist and place it into ~/Library/LaunchAgents/.\ncom.example.stand.up.plist\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.example.stand.up\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;sh\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;**PATH_TO_STAND_UP_SCRIPT_DESCRIBED_ABOVE**\u0026#34;\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;StartInterval\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;1200\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;ExitTimeOut\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;0\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;ProcessType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Standard\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; To start using this file (add to scheduler):\nlaunchctl load ~/Library/LaunchAgents/com.example.start.up.plist To stop using this file (remove from scheduler):\nlaunchctl unload ~/Library/LaunchAgents/com.example.start.up.plist To list scheduled tasks\nlaunchctl list After reboot this file com.example.start.up.plist will be used automatically.\n","id":64,"section":"posts","summary":"Foreword : Inspired by excellent post\nInitial task: creating notification every 20 minutes can be decomposed into two parts:\n create notification scheduled launch  First subtask can be solved using this trivial script.\nstandup.sh:\n#!/bin/sh  # stand up notification osascript -e \u0026#39;display notification \u0026#34;Stand up\u0026#34; with title \u0026#34;Healthy programmer\u0026#34;\u0026#39; say \u0026#34;Stand up\u0026#34; Second subtask (scheduled launch) can be solved using: daemon and agent mechanism.\nCreate file: com.example.stand.up.plist and place it into ~/Library/LaunchAgents/.","tags":["macos","automation","health"],"title":"Stand up every 20 minutes (mac os)","uri":"https://yantonov.com/post/2015-02-27-stand-up-every-20-minutes-mac-os/","year":"2015"},{"content":"Replicated SQLite using the Raft consensus protocol written in Go #sqlite #raft #consensus #golang\nIt seems, its time to start learning go\n","id":65,"section":"posts","summary":"Replicated SQLite using the Raft consensus protocol written in Go #sqlite #raft #consensus #golang\nIt seems, its time to start learning go","tags":["sqlite","raft","consensus","golang"],"title":"Replicated SQLite","uri":"https://yantonov.com/post/2015-02-23-replicated-sqlite/","year":"2015"},{"content":"Some haskell resources recommended by @bytemyapp.\n CIS 194: Introduction to Haskell (Spring 2013) NICTA course Stanford CS240h Spring 2014 Path to learning haskell  ","id":66,"section":"posts","summary":"Some haskell resources recommended by @bytemyapp.\n CIS 194: Introduction to Haskell (Spring 2013) NICTA course Stanford CS240h Spring 2014 Path to learning haskell  ","tags":["haskell","fprog","course"],"title":"Path to learn haskell","uri":"https://yantonov.com/post/2015-02-21-path-to-learn-haskell/","year":"2015"},{"content":"One of the popular interivew tasks\u0026hellip;\nYou are given a head of a linked list. Its known list contains cycle. The goal is to determine the length of the loop.\nHere is straghtforward solution in haskell\n{-data Node a instance Eq a =\u0026gt; Eq (Node a) next :: Node a -\u0026gt; Node a -} data Phase = TryFindLoop | FindLength deriving (Eq) loopSize :: Eq a =\u0026gt; Node a -\u0026gt; Int loopSize a = slowAndFast a a 0 TryFindLoop where slowAndFast :: (Eq node) =\u0026gt; Node node -\u0026gt; Node node -\u0026gt; Int -\u0026gt; Phase -\u0026gt; Int slowAndFast slow fast len phase = let nextSlow = next slow nextPreFast = next fast nextFast = next nextPreFast in if (slow == nextPreFast || slow == nextFast) then if (phase == FindLength) then if (nextPreFast == nextFast) then 1 else 2*(len+1) - len - (if slow == nextFast then 0 else 1) else slowAndFast nextSlow nextSlow 0 FindLength else slowAndFast nextSlow nextFast (len + 1) phase Complexity: time o(n), memory o(1)\nThe idea: consider two pointers \u0026lsquo;fast\u0026rsquo; and \u0026lsquo;slow\u0026rsquo;. At each iteration \u0026lsquo;slow\u0026rsquo; pointer makes one step, \u0026lsquo;fast\u0026rsquo; - two steps. Somewhere \u0026lsquo;fast\u0026rsquo; pointer touches \u0026lsquo;slow\u0026rsquo; and you can find length of the loop.\n","id":67,"section":"posts","summary":"One of the popular interivew tasks\u0026hellip;\nYou are given a head of a linked list. Its known list contains cycle. The goal is to determine the length of the loop.\nHere is straghtforward solution in haskell\n{-data Node a instance Eq a =\u0026gt; Eq (Node a) next :: Node a -\u0026gt; Node a -} data Phase = TryFindLoop | FindLength deriving (Eq) loopSize :: Eq a =\u0026gt; Node a -\u0026gt; Int loopSize a = slowAndFast a a 0 TryFindLoop where slowAndFast :: (Eq node) =\u0026gt; Node node -\u0026gt; Node node -\u0026gt; Int -\u0026gt; Phase -\u0026gt; Int slowAndFast slow fast len phase = let nextSlow = next slow nextPreFast = next fast nextFast = next nextPreFast in if (slow == nextPreFast || slow == nextFast) then if (phase == FindLength) then if (nextPreFast == nextFast) then 1 else 2*(len+1) - len - (if slow == nextFast then 0 else 1) else slowAndFast nextSlow nextSlow 0 FindLength else slowAndFast nextSlow nextFast (len + 1) phase Complexity: time o(n), memory o(1)","tags":["interview","task","problem","logic","linked list","data structures","fun","haskell"],"title":"Find the length of the loop","uri":"https://yantonov.com/post/2015-02-21-find-the-length-of-the-loop/","year":"2015"},{"content":"There is nice leiningen plugin named \u0026ldquo;Ultra\u0026rdquo; which can significantly improve your clojure\u0026lsquo;s repl interaction.\nMain features:\n colorized output of data structures (using solarized theme) clear test output better stacktraces java object introspection.  ","id":68,"section":"posts","summary":"There is nice leiningen plugin named \u0026ldquo;Ultra\u0026rdquo; which can significantly improve your clojure\u0026lsquo;s repl interaction.\nMain features:\n colorized output of data structures (using solarized theme) clear test output better stacktraces java object introspection.  ","tags":["clojure","repl","plugin","leiningen","ide","workflow"],"title":"Ultra leiningen plugin","uri":"https://yantonov.com/post/2015-02-03-ultra-leiningen-plugin/","year":"2015"},{"content":"Dont forget about Last-Modified/If-Modified-Since, ETag/If-None-Match headers while retrieving rss feeds. Details can be found in this article.\np.s. fyi header field definitions rfc2616\n","id":69,"section":"posts","summary":"Dont forget about Last-Modified/If-Modified-Since, ETag/If-None-Match headers while retrieving rss feeds. Details can be found in this article.\np.s. fyi header field definitions rfc2616","tags":["http","optimization","rfc","rss","specification"],"title":"Conditional get for rss hackers","uri":"https://yantonov.com/post/2015-01-25-conditional-get-for-rss-hackers/","year":"2015"},{"content":"To run ui test from command line you can use instruments app as described here.\ninstruments -w deviceID -t defaultTemplateFilePath targetAppName \\  -e UIASCRIPT scriptFilePath -e UIARESULTSPATH resultsFolderPath The problem is defaultTemplateFilePath depends on xcode version. Documentation says Automation.tracetemplate is located here :\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Instruments/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate Since xcode 6 Automation.tracetemplate can be found:\n/Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/PlugIns/AutomationInstrument.xrplugin/Contents/Resources/Automation.tracetemplate ","id":70,"section":"posts","summary":"To run ui test from command line you can use instruments app as described here.\ninstruments -w deviceID -t defaultTemplateFilePath targetAppName \\  -e UIASCRIPT scriptFilePath -e UIARESULTSPATH resultsFolderPath The problem is defaultTemplateFilePath depends on xcode version. Documentation says Automation.tracetemplate is located here :\n/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Instruments/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate Since xcode 6 Automation.tracetemplate can be found:\n/Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/PlugIns/AutomationInstrument.xrplugin/Contents/Resources/Automation.tracetemplate ","tags":["ios","ui","automation"],"title":"Run automation instruments script from the command line","uri":"https://yantonov.com/post/2015-01-24-run-automation-instruments-script-from-the-command-line/","year":"2015"},{"content":"I have just found a couple of nice articles about review of popular javascript frameworks angular and react. Recommend to read it.\n","id":71,"section":"posts","summary":"I have just found a couple of nice articles about review of popular javascript frameworks angular and react. Recommend to read it.","tags":["react","angular","javascript","review"],"title":"Unconventional review","uri":"https://yantonov.com/post/2015-01-19-unconventional-review/","year":"2015"},{"content":"I have read a nice article written by Yuanyian Zhou and James F. Philbin \u0026ldquo;Multi-queue replacement algorithm for second level buffer caches\u0026rdquo;. Authors compares well known implementations LRU, MRU, LFU etc and introduces new, more efficient method based on multiple queues, which performs better than other described implementations.\nI highly recommend to read it.\n","id":72,"section":"posts","summary":"I have read a nice article written by Yuanyian Zhou and James F. Philbin \u0026ldquo;Multi-queue replacement algorithm for second level buffer caches\u0026rdquo;. Authors compares well known implementations LRU, MRU, LFU etc and introduces new, more efficient method based on multiple queues, which performs better than other described implementations.\nI highly recommend to read it.","tags":["algorithm","cache","cs"],"title":"Multi-queue replacement algorithm for second level buffer caches","uri":"https://yantonov.com/post/2014-12-13-multi-queue-replacement-algorithm-for-second-level-buffer-caches/","year":"2014"},{"content":"Imagine you have commited file which name contain non latin letters.\ngit init test-repo cd test-repo echo \u0026#34;test\u0026#34; \u0026gt; тест.тэхэтэ git add . git commit -m \u0026#34;initial commit\u0026#34; Ok, lets list files changed at revision\ngit log -p Here you can see escaped file name, and obvious its hard to read.\ndiff --git \u0026quot;a/\\321\\202\\320\\265\\321\\201\\321\\202.\\321\\202\\321\\215\\321\\205\\321\\215\\ new file mode 100644 index 0000000..9daeafb --- /dev/null +++ \u0026quot;b/\\321\\202\\320\\265\\321\\201\\321\\202.\\321\\202\\321\\215\\321\\205\\321\\215\\321\\202 @@ -0,0 +1 @@ +test To handle this case there is config options \u0026lsquo;core.quotepath\u0026rsquo; The documentations (man git-config 1) says:\nThe commands that output paths (e.g. ls-files, diff), when not given the -z option, will quote \u0026quot;unusual\u0026quot; characters in the pathname by enclosing the pathname in a double-quote pair and with backslashes the same way strings in C source code are quoted. If this variable is set to false, the bytes higher than 0x80 are not quoted but output as verbatim. Note that double quote, backslash and control characters are always quoted without -z regardless of the setting of this variable. Try to use it:\ngit config --bool core.quotepath false git log -p iff --git a/тест.тэхэтэ b/тест.тэхэтэ new file mode 100644 index 0000000..9daeafb --- /dev/null +++ b/тест.тэхэтэ @@ -0,0 +1 @@ +test Nice, no escaped paths!\n","id":73,"section":"posts","summary":"Imagine you have commited file which name contain non latin letters.\ngit init test-repo cd test-repo echo \u0026#34;test\u0026#34; \u0026gt; тест.тэхэтэ git add . git commit -m \u0026#34;initial commit\u0026#34; Ok, lets list files changed at revision\ngit log -p Here you can see escaped file name, and obvious its hard to read.\ndiff --git \u0026quot;a/\\321\\202\\320\\265\\321\\201\\321\\202.\\321\\202\\321\\215\\321\\205\\321\\215\\ new file mode 100644 index 0000000..9daeafb --- /dev/null +++ \u0026quot;b/\\321\\202\\320\\265\\321\\201\\321\\202.\\321\\202\\321\\215\\321\\205\\321\\215\\321\\202 @@ -0,0 +1 @@ +test To handle this case there is config options \u0026lsquo;core.","tags":["git","vcs","scm","tip","trick","filename","encoding"],"title":"List non latin file names in git","uri":"https://yantonov.com/post/2014-12-07-list-non-latin-file-names-in-git/","year":"2014"},{"content":"Sometimes (more precisely - rarely) you need to export files changed at given revision as directory tree instead of patch file.\nMercurial vcs has archive command which let you to export selected files at given revision:\nhg archive --type files --rev $REVISION -I list_of_files To list files changed at revision:\nhg log -r $REVISION --template \u0026#39;{files}\\n\u0026#39; | sed \u0026#39;s/\\n / -I /g\u0026#39; Here end of line character is used to handle the case of using space character in filename.\nCombine this snippets\n#!/bin/bash  # dump all files changed at given revision into given directory REVISION=$1 DESTINATION=$2 if [ -n \u0026#34;$REVISION\u0026#34; ] \u0026amp;\u0026amp; [ -n \u0026#34;$DESTINATION\u0026#34; ]; then mkdir -p $DESTINATION hg archive --type files --rev $REVISION -I $(hg log -r $REVISION --template \u0026#39;{files}\\n\u0026#39; | sed \u0026#39;s/\\n / -I /g\u0026#39;) $DESTINATION else echo -e \u0026#34;`basename $0` revision outputdir\u0026#34; echo -e \u0026#34;\\twhere revision - revision number or hash\u0026#34; echo -e \u0026#34;\\toutputdir - destination directory (created if needed)\u0026#34; fi ","id":74,"section":"posts","summary":"Sometimes (more precisely - rarely) you need to export files changed at given revision as directory tree instead of patch file.\nMercurial vcs has archive command which let you to export selected files at given revision:\nhg archive --type files --rev $REVISION -I list_of_files To list files changed at revision:\nhg log -r $REVISION --template \u0026#39;{files}\\n\u0026#39; | sed \u0026#39;s/\\n / -I /g\u0026#39; Here end of line character is used to handle the case of using space character in filename.","tags":["mercurial","vcs","scm","export","tip","trick"],"title":"Export files changed at revision from mercurial","uri":"https://yantonov.com/post/2014-12-07-export-files-changed-at-revision-from-mercurial/","year":"2014"},{"content":"Church numerals is a great example of introducing abstraction in terms of composition of functions. This concept demonstrates that \u0026ldquo;data\u0026rdquo; (naturals numbers in particular) and operations on data can be defined in the same way - using higher-order functions.\nSummary:\ntype Church a = (a -\u0026gt; a) -\u0026gt; a -\u0026gt; a zero, cone, ctwo :: Church a zero s z = z one s z = s z two s = s . s three s = s . s . s nth n s z = iterate s z !! n add,mul,pow :: Church a -\u0026gt; Church a -\u0026gt; Church a add x y = \\s z -\u0026gt; x s (y s z) -- a little bit easy to understand mul1 x y = \\s z -\u0026gt; x (y s) z -- the same as mul x y = x . y pow x y = \\s z -\u0026gt; y (x s) (x s z) -- pretty print c2i x = x (+1) 0 -- Church to int c2s x = x (\u0026#39;*\u0026#39;:) \u0026#34;\u0026#34; -- Church to String Links:\n Church numerals: a tutorial Natural Numbers as Church Numerals Wikipedia  ","id":75,"section":"posts","summary":"Church numerals is a great example of introducing abstraction in terms of composition of functions. This concept demonstrates that \u0026ldquo;data\u0026rdquo; (naturals numbers in particular) and operations on data can be defined in the same way - using higher-order functions.\nSummary:\ntype Church a = (a -\u0026gt; a) -\u0026gt; a -\u0026gt; a zero, cone, ctwo :: Church a zero s z = z one s z = s z two s = s .","tags":["lambda calculus","haskell","fprog"],"title":"Church numerals","uri":"https://yantonov.com/post/2014-11-13-church-numerals/","year":"2014"},{"content":"Some time ago i read excellent post about emacs library pcomplete.\nThe author described implementation of completion for git, mercurial version control system using this library. Article is really usefull, i used code as is, its easy and provides all you need, but later i have some problem with it.\nFirst problem - eager evaluation. General commands for git and mercurial are calculated once. Great, there is no reason to call external process like git or hg multiple times but precalculation occured at script evaluation. You may not want to start eshell, so call hg or git is not needed.\nSecond problem - if you broke PATH variable (emacs cant find git or hg executable, or you install emacs before you install git or mercurial) than you got crash while starting emacs (not fatal but annoying emacs lisp errors).\nThats why i add some modifications. I preserve \u0026lsquo;precalculation\u0026rsquo; of general command list for git and mercurial using this trivial snippet:\ncache-defuns.el\n(defun cached (f) \u0026#34;evaluate once and cache it\u0026#34; (lexical-let ((value nil) (fn f)) (lambda (\u0026amp;rest args) (if (eq value nil) (progn (setq value (funcall fn)) value) value)))) (provide \u0026#39;cache-defuns) This snippet allow you to calculate function f once, and use its result at subsequent calls.\nAnother modifications connected with bad PATH variable. I dont throw exception or write message at emacs minibuffer but at time of completion corresponding error message will be printed at eshell instead of autocomplete results. Of course situation of broken PATH is not typical and occured very rarely so described solution works well.\nHere you can find final code:\nemacs-rc-pcomplete.el\n;;**** Git Completion (defun pcmpl-git-commands () \u0026#34;Return the most common git commands by parsing the git output.\u0026#34; (interactive) (with-temp-buffer (call-process-shell-command \u0026#34;git\u0026#34; nil (current-buffer) nil \u0026#34;help\u0026#34; \u0026#34;--all\u0026#34;) (goto-char 0) (if (eq (search-forward \u0026#34;available git commands in\u0026#34;) nil) \u0026#39;(\u0026#34;cant find git executable, check PATH varialbe\u0026#34;) (let (commands) (while (re-search-forward \u0026#34;^[[:blank:]]+\\\\([[:word:]-.]+\\\\)[[:blank:]]*\\\\([[:word:]-.]+\\\\)?\u0026#34; nil t) (push (match-string 1) commands) (when (match-string 2) (push (match-string 2) commands))) (sort commands #\u0026#39;string\u0026lt;))))) (defconst cached__pcmpl-git-commands (cached \u0026#39;pcmpl-git-commands) \u0026#34;Cached list of `git\u0026#39; commands.\u0026#34;) (defvar pcmpl-git-ref-list-cmd \u0026#34;git for-each-ref refs/ --format=\u0026#39;%(refname)\u0026#39;\u0026#34; \u0026#34;The `git\u0026#39; command to run to get a list of refs.\u0026#34;) (defun pcmpl-git-get-refs (type) \u0026#34;Return a list of `git\u0026#39; refs filtered by TYPE.\u0026#34; (with-temp-buffer (insert (shell-command-to-string pcmpl-git-ref-list-cmd)) (goto-char (point-min)) (let (refs) (while (re-search-forward (concat \u0026#34;^refs/\u0026#34; type \u0026#34;/\\\\(.+\\\\)$\u0026#34;) nil t) (push (match-string 1) refs)) (nreverse refs)))) (defun pcmpl-git-remotes () \u0026#34;Return a list of remote repositories.\u0026#34; (split-string (shell-command-to-string \u0026#34;git remote\u0026#34;))) (defun pcomplete/git () \u0026#34;Completion for `git\u0026#39;.\u0026#34; ;; Completion for the command argument. (pcomplete-here* (funcall cached__pcmpl-git-commands)) (cond ((pcomplete-match \u0026#34;help\u0026#34; 1) (pcomplete-here* (funcall cached__pcmpl-git-commands))) ((pcomplete-match (regexp-opt \u0026#39;(\u0026#34;pull\u0026#34; \u0026#34;push\u0026#34;)) 1) (pcomplete-here (pcmpl-git-remotes))) ;; provide branch completion for the command `checkout\u0026#39;. ((pcomplete-match \u0026#34;checkout\u0026#34; 1) (pcomplete-here* (append (pcmpl-git-get-refs \u0026#34;heads\u0026#34;) (pcmpl-git-get-refs \u0026#34;tags\u0026#34;)))) (t (while (pcomplete-here (pcomplete-entries)))))) ;;**** Mercurial (hg) Completion (defun pcmpl-hg-commands () \u0026#34;Return the most common hg commands by parsing the hg output.\u0026#34; (interactive) (with-temp-buffer (call-process-shell-command \u0026#34;hg\u0026#34; nil (current-buffer) nil \u0026#34;-v\u0026#34; \u0026#34;help\u0026#34;) (goto-char 0) (if (eq (search-forward \u0026#34;list of comxmands:\u0026#34; nil t) nil) \u0026#39;(\u0026#34;cant find hg executable, check PATH variable\u0026#34;) (let (commands (bound (save-excursion (re-search-forward \u0026#34;^[[:alpha:]]\u0026#34;) (forward-line 0) (point)))) (while (re-search-forward \u0026#34;^[[:blank:]]\\\\([[:word:]]+\\\\(?:, [[:word:]]+\\\\)*\\\\)\u0026#34; bound t) (let ((match (match-string 1))) (if (not (string-match \u0026#34;,\u0026#34; match)) (push (match-string 1) commands) (dolist (c (split-string match \u0026#34;, ?\u0026#34;)) (push c commands))))) (sort commands #\u0026#39;string\u0026lt;))))) (defconst cached__pcmpl-hg-commands (cached \u0026#39;pcmpl-hg-commands)) (defun pcomplete/hg () \u0026#34;Completion for `hg\u0026#39;.\u0026#34; ;; Completion for the command argument. (pcomplete-here* (funcall cached__pcmpl-hg-commands)) (cond ((pcomplete-match \u0026#34;help\u0026#34; 1) (pcomplete-here* (funcall cached__pcmpl-hg-commands))) (t (while (pcomplete-here (pcomplete-entries)))))) (provide \u0026#39;emacs-rc-pcomplete) Thanks tsdh and masteringemacs for excellent posts and great explanation of emacs tricks. Recommend you to read this awesome blogs.\n","id":76,"section":"posts","summary":"Some time ago i read excellent post about emacs library pcomplete.\nThe author described implementation of completion for git, mercurial version control system using this library. Article is really usefull, i used code as is, its easy and provides all you need, but later i have some problem with it.\nFirst problem - eager evaluation. General commands for git and mercurial are calculated once. Great, there is no reason to call external process like git or hg multiple times but precalculation occured at script evaluation.","tags":["emacs","lisp","git","mercurial"],"title":"Programmable completion for git and mercurial","uri":"https://yantonov.com/post/2014-11-09-programmable-completion-for-git-and-mercurial/","year":"2014"},{"content":"Foreword:\nSometimes you need to edit PATH variable.\nOf course you edit .bash_profile, .bashrc, .profile or other scripts and this works fine only in terminal.\nGUI apps at Mac Os use its own PATH variable (moreover has its own environment), which can be set using \u0026lsquo;launchctl setenv PATH \u0026lt;PATH_VALUE\u0026gt;\u0026rsquo;.\nSo you need to setup PATH for GUI apps correctly, and do not forget about PATH var for terminal.\nMoreover, after update to Mac Os X 10.10 Yosemite i was wondering about this:\nlaunchctl getenv PATH # empty response Reasons for such behaviour is unknown for me now (even after readind dozen of man pages and all latest recipes connected to this issue at stackoverflow). So if you add something to PATH:\nOLD=`launchctl getenv PATH` NEW=\u0026lt;your_path\u0026gt;:$OLD launchctl setenv PATH then you cant access from gui programs some applications at system directories (/bin:/sbin etc).\nI just decided to init empty PATH var by contents of /etc/paths.\nThe main question: what is the way to set up GUI PATH variable using script, reuse PATH variable from terminal settings, and start this script automatically. Daemon and agents mechanism gives an answer.\nThis script to setup PATH var:\nfix-gui-path.sh\n#!/bin/bash # patch PATH for gui (and spotlight in particular) # save old value of PATH var OLD_GUI_PATH=`launchctl getenv PATH` # if initial path is empty fill it using /etc/paths, otherwise # you cant use apps in system directories if [[ -z \u0026#34;$OLD_GUI_PATH\u0026#34; ]] then OLD_GUI_PATH=`cat /etc/paths | tr \u0026#34;\\n\u0026#34; \u0026#34;:\u0026#34; | sed \u0026#39;s/:$//\u0026#39;` fi # load .profile (i save terminal PATH modification here) # so i want to reuse this settings for gui applications # all my additional paths are saved as ADDITIONAL_PATH variable # one of my .profile file looks like # export ADDITIONAL_PATH=... source ~/.profile # patch gui PATH varible if [[ $OLD_GUI_PATH != *$ADDITIONAL_PATH* ]] then NEW_GUI_PATH=$ADDITIONAL_PATH:$OLD_GUI_PATH launchctl setenv PATH $NEW_GUI_PATH fi Than create plist file to inform launchd daemon to start your script:\ncom.example.gui.path.fix\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.example.gui.path.fix\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt; \u0026lt;string\u0026gt;***PATH_TO_SCRIPT***/fix-gui-path.sh\u0026lt;/string\u0026gt; \u0026lt;/array\u0026gt; \u0026lt;!--to avoid absolute path \u0026lt;string\u0026gt;sh\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;-c\u0026lt;/string\u0026gt; \u0026lt;string\u0026gt;\u0026#34;$HOME/***RELATIVE_PATH***\u0026lt;/string\u0026gt; --\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;key\u0026gt;ExitTimeOut\u0026lt;/key\u0026gt; \u0026lt;integer\u0026gt;0\u0026lt;/integer\u0026gt; \u0026lt;key\u0026gt;ProcessType\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Background\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; where PATH_TO_SCRIPT - absolute path to fix-gui-path.sh script descrived above, RELATIVE_PATH - relative path inside user directory. Place this file into ~/Library/LaunchAgents/.\nUsing this all your gui apps will use terminal PATH variable (no need to set PATH twice for terminal and gui apps) and the problem with gui PATH also will be solved.\n","id":77,"section":"posts","summary":"Foreword:\nSometimes you need to edit PATH variable.\nOf course you edit .bash_profile, .bashrc, .profile or other scripts and this works fine only in terminal.\nGUI apps at Mac Os use its own PATH variable (moreover has its own environment), which can be set using \u0026lsquo;launchctl setenv PATH \u0026lt;PATH_VALUE\u0026gt;\u0026rsquo;.\nSo you need to setup PATH for GUI apps correctly, and do not forget about PATH var for terminal.\nMoreover, after update to Mac Os X 10.","tags":["mac","shell","environment"],"title":"PATH variable for gui programs (Mac Os)","uri":"https://yantonov.com/post/2014-11-04-path-variable-for-gui-programs-mac-os/","year":"2014"},{"content":"There is some usefull git command rerere (reuse recorded resolution). Sometimes especially for long lived branch you need to resolve same conflicts again and again. This command let you save the results of conflict resolution and apply it again when needed.\nLet see how its works:\n# create test repo git init rerere # move to it cd rerere # enable rerere - reuse recorded resolution (its disabled by default) git config rerere.enabled true # add some file echo \u0026#34;test\u0026#34; \u0026gt; readme.txt git add . git commit -m \u0026#34;initial\u0026#34; # add some changes echo \u0026#34;line1\u0026#34; \u0026gt;\u0026gt; readme.txt git add . git commit -m \u0026#34;1\u0026#34; # save first revision hash (used only to avoid hardcoded hash sums) initialRevision=`git log HEAD^1 --pretty=format:\u0026#34;%H\u0026#34;` # create second branch based on initial revision # (simulate one long lived branch) git checkout -b first $initialRevision echo \u0026#34;line2\u0026#34; \u0026gt;\u0026gt; readme.txt git add . git commit -m \u0026#34;2\u0026#34; # create third branch based again on initial revision # (simulate one more long lived branch) git checkout -b second $initialRevision echo \u0026#34;line2\u0026#34; \u0026gt;\u0026gt; readme.txt git add . git commit -m \u0026#34;2 again\u0026#34; # move to master git checkout master # merge with first long lived branch git merge first # resolve conflict and preserve line1 echo -e \u0026#34;test\\nline1\u0026#34; \u0026gt; readme.txt git add . git commit -m \u0026#34;first merge\u0026#34; # now watch for output: # \u0026#39;Recorded resolution for \u0026#39;readme.txt\u0026#39;.\u0026#39; # git saves conflict resolution for readme.txt file # now lets merge with second branch # the same conflict has here git merge second # look at the output # \u0026#39;Resolved \u0026#39;readme.txt\u0026#39; using previous resolution.\u0026#39; cat readme.txt # you can see the results of saved resolution without conflict markers # means : \u0026#34;test\\nline1\u0026#34; This is pretty usefull for example, for package versions (pom files, project.clj), because such file fragments are strictly localized.\n... \u0026lt;version\u0026gt;1.2.3\u0026lt;/version\u0026gt; ... Be caferul, this works for precisely same (charater by charater) conflicts and same files. And one more, resolved conflicts older than 60 days will be pruned automatically, so you do not have to worry about repository size.\nUpd 1 Multiple changes to same file\nSuppose you have resolved several conflicts at the same file. What will rerere do ? Lets see \u0026hellip;\n# create test repo git init rerere # move to it cd rerere # enable rerere - reuse recorded resolution (its disabled by default) git config rerere.enabled true # add some file echo -e \u0026#34;first\\nsecond\\third\\fourth\u0026#34; \u0026gt; readme.txt git add . git commit -m \u0026#34;initial\u0026#34; # add some changes echo -e \u0026#34;first\\nsecond 111\\nthird\\nfourth 111\u0026#34; \u0026gt; readme.txt git add . git commit -m \u0026#34;111\u0026#34; # save first revision hash (used only to avoid hardcoded hash sums) initialRevision=`git log HEAD^1 --pretty=format:\u0026#34;%H\u0026#34;` # create second branch based on initial revision # (simulate one long lived branch) git checkout -b first $initialRevision echo -e \u0026#34;first\\nsecond 222\\nthird\\nfourth 111\u0026#34; \u0026gt; readme.txt git add . git commit -m \u0026#34;222\u0026#34; # create third branch based again on initial revision # (simulate one more long lived branch) git checkout -b second $initialRevision echo -e \u0026#34;first\\nsecond 222\\nthird\\nfourth 333\u0026#34; \u0026gt; readme.txt git add . git commit -m \u0026#34;222 and 333\u0026#34; # move to master git checkout master # merge with first long lived branch git merge first # resolve conflict and preserve 111 echo -e \u0026#34;first\\nsecond 111\\nthird\\nfourth 111\u0026#34; \u0026gt; readme.txt git add . git commit -m \u0026#34;first merge\u0026#34; # now watch for output: # \u0026#39;Recorded resolution for \u0026#39;readme.txt\u0026#39;.\u0026#39; # git saves conflict resolution for readme.txt file # now lets merge with second branch # the same conflict has here git merge second # look at the output # Automatic merge failed; fix conflicts and then commit the result. cat readme.txt # you can see the conflict markers (rerere will apply stored resolution only in case of same conflict for whole file) # there are no partial changes ! # contents of the file: # \u0026#39;Resolved \u0026#39;readme.txt\u0026#39; using previous resolution.\u0026#39; # first # \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD # second 111 # third # fourth 111 # ======= # second 222 # third # fourth 333 # \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; second As you can see, there are no partial application.\nSimple rule: same conflict for whole file -\u0026gt; apply stored resolution, any differences -\u0026gt; resolve manually and save it as another resolution sample.\n","id":78,"section":"posts","summary":"There is some usefull git command rerere (reuse recorded resolution). Sometimes especially for long lived branch you need to resolve same conflicts again and again. This command let you save the results of conflict resolution and apply it again when needed.\nLet see how its works:\n# create test repo git init rerere # move to it cd rerere # enable rerere - reuse recorded resolution (its disabled by default) git config rerere.","tags":["git","vcs","scm","merge"],"title":"Git rerere","uri":"https://yantonov.com/post/2014-11-04-git-rerere/","year":"2014"},{"content":"Sometimes you need to build .net solution/project on different platforms (for example while developing xamarin based application). In that case pre/post build events may contain platform specific instructions.\nTo handle this situation you can use \u0026lsquo;Condition\u0026rsquo; attribute and \u0026lsquo;OS\u0026rsquo; variable, for example, like this:\n\u0026lt;PostBuildEvent Condition=\u0026#34; \u0026#39;$(OS)\u0026#39; == \u0026#39;Windows_NT\u0026#39; \u0026#34;\u0026gt; \u0026lt;!--windows specifics --\u0026gt; copy $(TargetPath) $(ProjectDir)../Assemblies /Y \u0026lt;/PostBuildEvent\u0026gt; \u0026lt;PostBuildEvent Condition=\u0026#34; \u0026#39;$(OS)\u0026#39; == \u0026#39;Unix\u0026#39; \u0026#34;\u0026gt; \u0026lt;!--*nix, mac specifics --\u0026gt; cp -f $(TargetPath) $(ProjectDir)../Assemblies \u0026lt;/PostBuildEvent\u0026gt; If OS macro is undefined, you can explicitly define it at project level (projectName.cproj) like this:\n\u0026lt;PropertyGroup\u0026gt; \u0026lt;OS\u0026gt;Unix\u0026lt;/OS\u0026gt; \u0026lt;/PropertyGroup\u0026gt; Or pass as parameter to msbuild/xbuild tool (like this /property:name=value)\n","id":79,"section":"posts","summary":"Sometimes you need to build .net solution/project on different platforms (for example while developing xamarin based application). In that case pre/post build events may contain platform specific instructions.\nTo handle this situation you can use \u0026lsquo;Condition\u0026rsquo; attribute and \u0026lsquo;OS\u0026rsquo; variable, for example, like this:\n\u0026lt;PostBuildEvent Condition=\u0026#34; \u0026#39;$(OS)\u0026#39; == \u0026#39;Windows_NT\u0026#39; \u0026#34;\u0026gt; \u0026lt;!--windows specifics --\u0026gt; copy $(TargetPath) $(ProjectDir)../Assemblies /Y \u0026lt;/PostBuildEvent\u0026gt; \u0026lt;PostBuildEvent Condition=\u0026#34; \u0026#39;$(OS)\u0026#39; == \u0026#39;Unix\u0026#39; \u0026#34;\u0026gt; \u0026lt;!--*nix, mac specifics --\u0026gt; cp -f $(TargetPath) $(ProjectDir).","tags":["xamarin",".net"],"title":"Platform specific build event","uri":"https://yantonov.com/post/2014-11-03-platform-specific-build-event/","year":"2014"},{"content":"Here are some usefull git aliases which i use on a daily basis:\nOutput samples are generated using clojure repository\nList of one line commits\nls = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)\u0026lt;%an\u0026gt;%Creset'  List of commits with changed files\nll = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)\u0026lt;%an\u0026gt;%Creset' --decorate --numstat  List of commits without colors\nlnc = log --pretty=format:\u0026quot;%h\\\\ %s\\\\ [%cn]\u0026quot;  Commits with dates\nldt = log --all --pretty=format:'%Cred%h%Creset %Cgreen%ad%Creset -%C(yellow)%d%Creset %s %C(bold blue)\u0026lt;%an\u0026gt;%Creset'  Commits with short dates\nlds = \u0026quot;!git ldt --date=short\u0026quot;  Commits with relative dates\nldr = \u0026quot;!git ldt --date=relative\u0026quot;  commits with date and times\nldi = \u0026quot;!git ldt --date=iso\u0026quot;  Commit tree\nlgraph = log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci)%Creset %C(bold blue)\u0026lt;%an\u0026gt;%Creset'  Default look for short git log\nldef = log --oneline --decorate  Commits related to a file\nfilelog = log -u fl = log -u  Last commit\nlc = \u0026quot;!git ll -1\u0026quot;  ","id":80,"section":"posts","summary":"Here are some usefull git aliases which i use on a daily basis:\nOutput samples are generated using clojure repository\nList of one line commits\nls = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)\u0026lt;%an\u0026gt;%Creset'  List of commits with changed files\nll = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)\u0026lt;%an\u0026gt;%Creset' --decorate --numstat  List of commits without colors\nlnc = log --pretty=format:\u0026quot;%h\\\\ %s\\\\ [%cn]\u0026quot;  Commits with dates\nldt = log --all --pretty=format:'%Cred%h%Creset %Cgreen%ad%Creset -%C(yellow)%d%Creset %s %C(bold blue)\u0026lt;%an\u0026gt;%Creset'  Commits with short dates","tags":["git","alias","config","vcs","scm"],"title":"Git log aliases","uri":"https://yantonov.com/post/2014-10-31-git-log-aliases/","year":"2014"},{"content":"Some time ago i wrote gist which described how to install ghc from source on ubuntu. Today i see question on stackoverflow.com connected with my gist. I have fixed gist immediately and think about leaving comment to person who had some difficulties with it. I log on using google account and try to leave comment and \u0026hellip; i cant do it because my repuration is too low (this is just new account). What ?!? This is service for questions and answers, why i have such strange limitation connected with main purpose of this resource. Completely disappointed.\n","id":81,"section":"posts","summary":"Some time ago i wrote gist which described how to install ghc from source on ubuntu. Today i see question on stackoverflow.com connected with my gist. I have fixed gist immediately and think about leaving comment to person who had some difficulties with it. I log on using google account and try to leave comment and \u0026hellip; i cant do it because my repuration is too low (this is just new account).","tags":["stackoverflow","usability","ux"],"title":"Stackoverflow reputation problem","uri":"https://yantonov.com/post/2014-10-28-stackoverflow-reputation-problem/","year":"2014"},{"content":"Suppose you install some program into your home directory (i had installed mercurial from source). To use it you have to patch PATH variable.\nTo achieve this, you needed to modify, for example, local .profile file (its undesirable to modify global config like etc/profile). So your .profile file contains something like this:\nexport PATH=$ADDITIONAL_PATH:$PATH It wokrs great from terminal. But you cant use variable defined such way from programs launched throught spotlight, because all apps started from gui interface of Mac Os has its own list of environemnt variables (independent from terminal). In my case i cant access mercurial from emacs launched from spotlight.\nYou can access environment variables used by gui apps in such way:\n$ launchctl getenv PATH To change it:\n$ launchctl setenv PATH $SOME_PATH Its reasonable to preserve original PATH while patching. So you want to add your $ADDITIONAL_PATH into gui PATH\n# save old path OLD_GUI_PATH=`launchctl getenv PATH` # construct new path NEW_GUI_PATH=$ADDITIONAL_PATH:$OLD_GUI_PATH # update gui path launchctl setenv PATH $NEW_GUI_PATH These changes are not persisted, so you will miss it after restart. Hhhhaaa, add this into .profile.\nBut .profile is evaluated at every launch of terminal.\nSo you have conditionally patch your environent variables, in other words .profile must be idempotent. Multiple evaluation of .profile must have same effect as single evaluation, othewise after terminal app launches several times, your PATH looks like this:\nADDITIONAL_PATH:ADDITIONAL_PATH:ADDITIONAL_PATH...:$PATH So final version of the script:\n# patch PATH for terminal programs # check variable hasnt already patched if [[ $PATH != *$ADDITIONAL_PATH* ]] then export PATH=$ADDITIONAL_PATH:$PATH fi # patch PATH for gui (and spotlight in particular) # preserve old values OLD_GUI_PATH=`launchctl getenv PATH` # check if has not already patched if [[ $OLD_GUI_PATH != *$ADDITIONAL_PATH* ]] then NEW_GUI_PATH=$ADDITIONAL_PATH:$OLD_GUI_PATH launchctl setenv PATH $NEW_GUI_PATH fi Looks like a little bit cumbersome, but works ! If there is easier way, i would be glad to know.\nUpdate: There is problem with this solution. launchctl settings are updated during first load of .profile file. So if you has not opened terminal app yes (for example after restart), you cant use this customization.\nUpdated solution can be found here.\n","id":82,"section":"posts","summary":"Suppose you install some program into your home directory (i had installed mercurial from source). To use it you have to patch PATH variable.\nTo achieve this, you needed to modify, for example, local .profile file (its undesirable to modify global config like etc/profile). So your .profile file contains something like this:\nexport PATH=$ADDITIONAL_PATH:$PATH It wokrs great from terminal. But you cant use variable defined such way from programs launched throught spotlight, because all apps started from gui interface of Mac Os has its own list of environemnt variables (independent from terminal).","tags":["mac","environment","shell"],"title":"Mac os environment variables","uri":"https://yantonov.com/post/2014-10-27-mac-os-environment-variables/","year":"2014"},{"content":"hello world :-)\n","id":83,"section":"posts","summary":"hello world :-)","tags":null,"title":"Hello world","uri":"https://yantonov.com/post/2014-10-27-hello-world/","year":"2014"}],"tags":[{"title":".net","uri":"https://yantonov.com/tags/.net/"},{"title":"ai","uri":"https://yantonov.com/tags/ai/"},{"title":"algo","uri":"https://yantonov.com/tags/algo/"},{"title":"algorithm","uri":"https://yantonov.com/tags/algorithm/"},{"title":"alias","uri":"https://yantonov.com/tags/alias/"},{"title":"alice","uri":"https://yantonov.com/tags/alice/"},{"title":"angular","uri":"https://yantonov.com/tags/angular/"},{"title":"api","uri":"https://yantonov.com/tags/api/"},{"title":"architecture","uri":"https://yantonov.com/tags/architecture/"},{"title":"article","uri":"https://yantonov.com/tags/article/"},{"title":"audio","uri":"https://yantonov.com/tags/audio/"},{"title":"automation","uri":"https://yantonov.com/tags/automation/"},{"title":"blog","uri":"https://yantonov.com/tags/blog/"},{"title":"book","uri":"https://yantonov.com/tags/book/"},{"title":"cache","uri":"https://yantonov.com/tags/cache/"},{"title":"caching","uri":"https://yantonov.com/tags/caching/"},{"title":"cd","uri":"https://yantonov.com/tags/cd/"},{"title":"ci","uri":"https://yantonov.com/tags/ci/"},{"title":"cli","uri":"https://yantonov.com/tags/cli/"},{"title":"clojure","uri":"https://yantonov.com/tags/clojure/"},{"title":"command line","uri":"https://yantonov.com/tags/command-line/"},{"title":"commit","uri":"https://yantonov.com/tags/commit/"},{"title":"composition","uri":"https://yantonov.com/tags/composition/"},{"title":"computer vision","uri":"https://yantonov.com/tags/computer-vision/"},{"title":"concurrency","uri":"https://yantonov.com/tags/concurrency/"},{"title":"config","uri":"https://yantonov.com/tags/config/"},{"title":"configuration","uri":"https://yantonov.com/tags/configuration/"},{"title":"congestion control","uri":"https://yantonov.com/tags/congestion-control/"},{"title":"connection","uri":"https://yantonov.com/tags/connection/"},{"title":"consensus","uri":"https://yantonov.com/tags/consensus/"},{"title":"context","uri":"https://yantonov.com/tags/context/"},{"title":"continuous delivery","uri":"https://yantonov.com/tags/continuous-delivery/"},{"title":"course","uri":"https://yantonov.com/tags/course/"},{"title":"crdt","uri":"https://yantonov.com/tags/crdt/"},{"title":"cs","uri":"https://yantonov.com/tags/cs/"},{"title":"css","uri":"https://yantonov.com/tags/css/"},{"title":"data structures","uri":"https://yantonov.com/tags/data-structures/"},{"title":"deep learning","uri":"https://yantonov.com/tags/deep-learning/"},{"title":"dependency","uri":"https://yantonov.com/tags/dependency/"},{"title":"deploy","uri":"https://yantonov.com/tags/deploy/"},{"title":"design","uri":"https://yantonov.com/tags/design/"},{"title":"distributed systems","uri":"https://yantonov.com/tags/distributed-systems/"},{"title":"docker","uri":"https://yantonov.com/tags/docker/"},{"title":"dotfiles","uri":"https://yantonov.com/tags/dotfiles/"},{"title":"drivers","uri":"https://yantonov.com/tags/drivers/"},{"title":"economics","uri":"https://yantonov.com/tags/economics/"},{"title":"emacs","uri":"https://yantonov.com/tags/emacs/"},{"title":"email","uri":"https://yantonov.com/tags/email/"},{"title":"encoding","uri":"https://yantonov.com/tags/encoding/"},{"title":"enheritance","uri":"https://yantonov.com/tags/enheritance/"},{"title":"environment","uri":"https://yantonov.com/tags/environment/"},{"title":"error","uri":"https://yantonov.com/tags/error/"},{"title":"export","uri":"https://yantonov.com/tags/export/"},{"title":"fault tolerance","uri":"https://yantonov.com/tags/fault-tolerance/"},{"title":"filename","uri":"https://yantonov.com/tags/filename/"},{"title":"flash","uri":"https://yantonov.com/tags/flash/"},{"title":"form","uri":"https://yantonov.com/tags/form/"},{"title":"fp","uri":"https://yantonov.com/tags/fp/"},{"title":"fprog","uri":"https://yantonov.com/tags/fprog/"},{"title":"fun","uri":"https://yantonov.com/tags/fun/"},{"title":"gamedev","uri":"https://yantonov.com/tags/gamedev/"},{"title":"git","uri":"https://yantonov.com/tags/git/"},{"title":"github","uri":"https://yantonov.com/tags/github/"},{"title":"go","uri":"https://yantonov.com/tags/go/"},{"title":"golang","uri":"https://yantonov.com/tags/golang/"},{"title":"haskell","uri":"https://yantonov.com/tags/haskell/"},{"title":"health","uri":"https://yantonov.com/tags/health/"},{"title":"http","uri":"https://yantonov.com/tags/http/"},{"title":"ide","uri":"https://yantonov.com/tags/ide/"},{"title":"install","uri":"https://yantonov.com/tags/install/"},{"title":"interface","uri":"https://yantonov.com/tags/interface/"},{"title":"interview","uri":"https://yantonov.com/tags/interview/"},{"title":"ios","uri":"https://yantonov.com/tags/ios/"},{"title":"javascript","uri":"https://yantonov.com/tags/javascript/"},{"title":"jvm","uri":"https://yantonov.com/tags/jvm/"},{"title":"kalman filter","uri":"https://yantonov.com/tags/kalman-filter/"},{"title":"keyboard","uri":"https://yantonov.com/tags/keyboard/"},{"title":"lambda calculus","uri":"https://yantonov.com/tags/lambda-calculus/"},{"title":"leiningen","uri":"https://yantonov.com/tags/leiningen/"},{"title":"library","uri":"https://yantonov.com/tags/library/"},{"title":"limit","uri":"https://yantonov.com/tags/limit/"},{"title":"linked list","uri":"https://yantonov.com/tags/linked-list/"},{"title":"links","uri":"https://yantonov.com/tags/links/"},{"title":"linux","uri":"https://yantonov.com/tags/linux/"},{"title":"lisp","uri":"https://yantonov.com/tags/lisp/"},{"title":"logic","uri":"https://yantonov.com/tags/logic/"},{"title":"mac","uri":"https://yantonov.com/tags/mac/"},{"title":"machine learning","uri":"https://yantonov.com/tags/machine-learning/"},{"title":"macos","uri":"https://yantonov.com/tags/macos/"},{"title":"matplotlib","uri":"https://yantonov.com/tags/matplotlib/"},{"title":"memory","uri":"https://yantonov.com/tags/memory/"},{"title":"mercurial","uri":"https://yantonov.com/tags/mercurial/"},{"title":"merge","uri":"https://yantonov.com/tags/merge/"},{"title":"microphone","uri":"https://yantonov.com/tags/microphone/"},{"title":"microservice","uri":"https://yantonov.com/tags/microservice/"},{"title":"mlops","uri":"https://yantonov.com/tags/mlops/"},{"title":"mock","uri":"https://yantonov.com/tags/mock/"},{"title":"monad","uri":"https://yantonov.com/tags/monad/"},{"title":"nalsd","uri":"https://yantonov.com/tags/nalsd/"},{"title":"nautilus","uri":"https://yantonov.com/tags/nautilus/"},{"title":"network","uri":"https://yantonov.com/tags/network/"},{"title":"neural-netrowk","uri":"https://yantonov.com/tags/neural-netrowk/"},{"title":"neural network","uri":"https://yantonov.com/tags/neural-network/"},{"title":"notification","uri":"https://yantonov.com/tags/notification/"},{"title":"observable","uri":"https://yantonov.com/tags/observable/"},{"title":"ops","uri":"https://yantonov.com/tags/ops/"},{"title":"optimization","uri":"https://yantonov.com/tags/optimization/"},{"title":"package","uri":"https://yantonov.com/tags/package/"},{"title":"parallel","uri":"https://yantonov.com/tags/parallel/"},{"title":"pattern recognition","uri":"https://yantonov.com/tags/pattern-recognition/"},{"title":"paxos","uri":"https://yantonov.com/tags/paxos/"},{"title":"performance","uri":"https://yantonov.com/tags/performance/"},{"title":"plugin","uri":"https://yantonov.com/tags/plugin/"},{"title":"podcast","uri":"https://yantonov.com/tags/podcast/"},{"title":"probability","uri":"https://yantonov.com/tags/probability/"},{"title":"problem","uri":"https://yantonov.com/tags/problem/"},{"title":"project","uri":"https://yantonov.com/tags/project/"},{"title":"python","uri":"https://yantonov.com/tags/python/"},{"title":"raft","uri":"https://yantonov.com/tags/raft/"},{"title":"react","uri":"https://yantonov.com/tags/react/"},{"title":"repl","uri":"https://yantonov.com/tags/repl/"},{"title":"research","uri":"https://yantonov.com/tags/research/"},{"title":"review","uri":"https://yantonov.com/tags/review/"},{"title":"rfc","uri":"https://yantonov.com/tags/rfc/"},{"title":"rss","uri":"https://yantonov.com/tags/rss/"},{"title":"rust","uri":"https://yantonov.com/tags/rust/"},{"title":"rx","uri":"https://yantonov.com/tags/rx/"},{"title":"salary","uri":"https://yantonov.com/tags/salary/"},{"title":"scala","uri":"https://yantonov.com/tags/scala/"},{"title":"scalability","uri":"https://yantonov.com/tags/scalability/"},{"title":"scm","uri":"https://yantonov.com/tags/scm/"},{"title":"script","uri":"https://yantonov.com/tags/script/"},{"title":"setup","uri":"https://yantonov.com/tags/setup/"},{"title":"shell","uri":"https://yantonov.com/tags/shell/"},{"title":"shortcut","uri":"https://yantonov.com/tags/shortcut/"},{"title":"sound","uri":"https://yantonov.com/tags/sound/"},{"title":"specification","uri":"https://yantonov.com/tags/specification/"},{"title":"sqlite","uri":"https://yantonov.com/tags/sqlite/"},{"title":"ssh","uri":"https://yantonov.com/tags/ssh/"},{"title":"stackoverflow","uri":"https://yantonov.com/tags/stackoverflow/"},{"title":"static","uri":"https://yantonov.com/tags/static/"},{"title":"station","uri":"https://yantonov.com/tags/station/"},{"title":"stub","uri":"https://yantonov.com/tags/stub/"},{"title":"system design","uri":"https://yantonov.com/tags/system-design/"},{"title":"tagless final","uri":"https://yantonov.com/tags/tagless-final/"},{"title":"task","uri":"https://yantonov.com/tags/task/"},{"title":"tcp","uri":"https://yantonov.com/tags/tcp/"},{"title":"tdd","uri":"https://yantonov.com/tags/tdd/"},{"title":"terminal","uri":"https://yantonov.com/tags/terminal/"},{"title":"test","uri":"https://yantonov.com/tags/test/"},{"title":"tip","uri":"https://yantonov.com/tags/tip/"},{"title":"tool","uri":"https://yantonov.com/tags/tool/"},{"title":"trick","uri":"https://yantonov.com/tags/trick/"},{"title":"troubleshooting","uri":"https://yantonov.com/tags/troubleshooting/"},{"title":"trunk","uri":"https://yantonov.com/tags/trunk/"},{"title":"types","uri":"https://yantonov.com/tags/types/"},{"title":"typescript","uri":"https://yantonov.com/tags/typescript/"},{"title":"ubuntu","uri":"https://yantonov.com/tags/ubuntu/"},{"title":"ui","uri":"https://yantonov.com/tags/ui/"},{"title":"unix","uri":"https://yantonov.com/tags/unix/"},{"title":"usability","uri":"https://yantonov.com/tags/usability/"},{"title":"ux","uri":"https://yantonov.com/tags/ux/"},{"title":"vcs","uri":"https://yantonov.com/tags/vcs/"},{"title":"watch","uri":"https://yantonov.com/tags/watch/"},{"title":"watchers","uri":"https://yantonov.com/tags/watchers/"},{"title":"web","uri":"https://yantonov.com/tags/web/"},{"title":"webpack","uri":"https://yantonov.com/tags/webpack/"},{"title":"webrtc","uri":"https://yantonov.com/tags/webrtc/"},{"title":"wifi","uri":"https://yantonov.com/tags/wifi/"},{"title":"windows","uri":"https://yantonov.com/tags/windows/"},{"title":"workflow","uri":"https://yantonov.com/tags/workflow/"},{"title":"wsl","uri":"https://yantonov.com/tags/wsl/"},{"title":"xamarin","uri":"https://yantonov.com/tags/xamarin/"},{"title":"yandex","uri":"https://yantonov.com/tags/yandex/"}]}