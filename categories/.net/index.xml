<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.net on Pure theme for Hugo</title>
    <link>https://yantonov.com/categories/.net/</link>
    <description>Recent content in .net on Pure theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 03 Nov 2014 13:43:28 +0500</lastBuildDate>
    
        <atom:link href="https://yantonov.com/categories/.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to remember ssh keys on mac os</title>
      <link>https://yantonov.com/post/2019-12-15-how_to_remember_ssh_keys_on_mac_os/</link>
      <pubDate>Sun, 15 Dec 2019 19:04:37 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2019-12-15-how_to_remember_ssh_keys_on_mac_os/</guid>
      <description>Got tired to enter ssh passphrases on mac os and want to know how easily force ssh-agent to remember ssh keys?
Add this snippet to ~/.ssh/config file:
Host * AddKeysToAgent yes UseKeychain yes Source</description>
    </item>
    
    <item>
      <title>K-Minimum values sketch</title>
      <link>https://yantonov.com/post/2019-06-15-k-minimum_values_sketch/</link>
      <pubDate>Sat, 15 Jun 2019 14:15:36 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2019-06-15-k-minimum_values_sketch/</guid>
      <description>Simple probabilistic data structure used to count distinct values.
source</description>
    </item>
    
    <item>
      <title>Parallel and concurrenct programming in haskell</title>
      <link>https://yantonov.com/post/2017-12-13-parallel_and_concurrenct_programming_in_haskell/</link>
      <pubDate>Wed, 13 Dec 2017 22:56:24 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-12-13-parallel_and_concurrenct_programming_in_haskell/</guid>
      <description>Here is html version of Simon Marlow&#39;s book &amp;lsquo;Parallel and Concurrent Programming in Haskell&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Velocity conference 2017</title>
      <link>https://yantonov.com/post/2017-12-08-velocity_conf_2017/</link>
      <pubDate>Fri, 08 Dec 2017 19:28:08 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-12-08-velocity_conf_2017/</guid>
      <description>Slides and videos from the Velocity conference 2017.</description>
    </item>
    
    <item>
      <title>Webpack has not enough watchers</title>
      <link>https://yantonov.com/post/2017-09-13-webpack-not-enough-watchers/</link>
      <pubDate>Wed, 13 Sep 2017 14:34:45 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-09-13-webpack-not-enough-watchers/</guid>
      <description>Not enough watchers Verify that if you have enough available watchers in your system. If this value is too low, the file watcher in Webpack won’t recognize the changes:
cat /proc/sys/fs/inotify/max_user_watches Arch users, add fs.inotify.max_user_watches=524288 to /etc/sysctl.d/99-sysctl.conf and then execute sysctl &amp;ndash;system.
Ubuntu users (and possibly others):
echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;amp;&amp;amp; sudo sysctl -p Source</description>
    </item>
    
    <item>
      <title>CVRP 2017 Papers</title>
      <link>https://yantonov.com/post/2017-08-16-cvrp-2017-papers/</link>
      <pubDate>Wed, 16 Aug 2017 15:34:17 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-08-16-cvrp-2017-papers/</guid>
      <description>Papers from CVRP 2017</description>
    </item>
    
    <item>
      <title>Neural turing machines</title>
      <link>https://yantonov.com/post/2017-05-03-neural_turing_machines/</link>
      <pubDate>Wed, 03 May 2017 03:16:05 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-05-03-neural_turing_machines/</guid>
      <description>[https://arxiv.org/abs/1410.5401](Neural Turing Machines)
 We extend the capabilities of neural networks by coupling them to external memory resources, which they can interact with by attentional processes. The combined system is analogous to a Turing Machine or Von Neumann architecture but is differentiable end-to-end, allowing it to be efficiently trained with gradient descent. Preliminary results demonstrate that Neural Turing Machines can infer simple algorithms such as copying, sorting, and associative recall from input and output examples.</description>
    </item>
    
    <item>
      <title>Lispy css</title>
      <link>https://yantonov.com/post/2017-04-13-lass/</link>
      <pubDate>Thu, 13 Apr 2017 20:49:57 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-04-13-lass/</guid>
      <description>Write css rules with lispy syntax using lass.</description>
    </item>
    
    <item>
      <title>kalman filter</title>
      <link>https://yantonov.com/post/2017-03-22-kalman-filter/</link>
      <pubDate>Wed, 22 Mar 2017 05:19:56 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-03-22-kalman-filter/</guid>
      <description>Concise explanation of Kalman filter</description>
    </item>
    
    <item>
      <title>functional programming related podcasts</title>
      <link>https://yantonov.com/post/2017-01-21-functional-programming-related-podcasts/</link>
      <pubDate>Sat, 21 Jan 2017 21:31:02 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-01-21-functional-programming-related-podcasts/</guid>
      <description>List{:target=&amp;rdquo;_blank&amp;rdquo;} of functional programming related podcasts. Happy listening!</description>
    </item>
    
    <item>
      <title>Bye octopress, hello hugo</title>
      <link>https://yantonov.com/post/2017-01-06-bye-octopress-hello-hugo/</link>
      <pubDate>Fri, 06 Jan 2017 13:02:38 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-01-06-bye-octopress-hello-hugo/</guid>
      <description>This tiny blog has just been migrated from octropress to hugo.
Pros:
 service code and content (blog posts) are not mixed easy installation and configuration/customization process no more any troubles with ruby (on mac in particular) speed  Generator is written in go lang :-), maybe for someone this is an additional argument.
Cons: &amp;hellip; cant see, at least now
Good day!</description>
    </item>
    
    <item>
      <title>Install matplotlib on mac sierra</title>
      <link>https://yantonov.com/post/2017-01-05-install-matplotlib-on-macos-sierra/</link>
      <pubDate>Thu, 05 Jan 2017 22:38:37 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2017-01-05-install-matplotlib-on-macos-sierra/</guid>
      <description>During matplotlib installation (for python3) some error may occured:
&amp;lsquo;The following required packages can not be built:
 freetype png&amp;rsquo;  Thats why some additional steps may be required:
  install homebrew
  install pkg-config
  brew install pkg-config install freetype  brew install freetype install matplotlib  pip3 install matplotlib Enjoy!</description>
    </item>
    
    <item>
      <title>Can not connect to hidden wifi (ubuntu 16.04 lts)</title>
      <link>https://yantonov.com/post/2016-12-10-cant-connect-to-hidden-wifi/</link>
      <pubDate>Sat, 10 Dec 2016 21:38:41 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2016-12-10-cant-connect-to-hidden-wifi/</guid>
      <description>Problem: its impossible to connect to hidden wifi network (connect button is disabled) Solution: execute in terminal (where sid - wifi network id):
nmcli c up id &amp;lt;sid&amp;gt; bug status</description>
    </item>
    
    <item>
      <title>2Q a low overhead high performance buffer managemenent replacement algorithm</title>
      <link>https://yantonov.com/post/2016-07-31-2q-a-low-overhead-high-performance-buffer-managemenent-replacement-algorithm/</link>
      <pubDate>Sun, 31 Jul 2016 11:29:56 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2016-07-31-2q-a-low-overhead-high-performance-buffer-managemenent-replacement-algorithm/</guid>
      <description>Excellent article which shows how to apply pareto rule for caching strategies.</description>
    </item>
    
    <item>
      <title>Strange shift key behaviour when renaming files in ubuntu</title>
      <link>https://yantonov.com/post/2016-05-10-strange-shift-key-behaviour-when-renaming-files-in-ubuntu/</link>
      <pubDate>Tue, 10 May 2016 08:45:32 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2016-05-10-strange-shift-key-behaviour-when-renaming-files-in-ubuntu/</guid>
      <description>There is a really puzzling behaviour in Nautilus regarding my Shift key. Consider the following scenario:
 Choose any file to rename During renaming i can type just fine unless i need a capital letter. If i type a capital letter (using shift) then focus shifts to some file at the same folder.  Clarification: Current shortcut to change layout LShift+RShift.
Solution: Change shortcut to, for example, LCtrl + LShift (System Settings -&amp;gt; Text Entry)and the problem disappears.</description>
    </item>
    
    <item>
      <title>Bye bye mercurial</title>
      <link>https://yantonov.com/post/2016-03-12-bye-bye-mercurial/</link>
      <pubDate>Sat, 12 Mar 2016 19:54:21 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2016-03-12-bye-bye-mercurial/</guid>
      <description>Has just migrated all my mercurial repositories to git. Its a little bit sad, but it will increase uniformity. More over there is gitlab which provides free private repositories as well as bitbucket.
P.s. here is a simple script aimed to convert hg repo to git,
maybe it will be helpful</description>
    </item>
    
    <item>
      <title>Delete package (some-package.pkg) from Mac OS</title>
      <link>https://yantonov.com/post/2015-10-14-delete-pkg-from-mac-os/</link>
      <pubDate>Wed, 14 Oct 2015 15:46:08 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-10-14-delete-pkg-from-mac-os/</guid>
      <description>Sometimes you may want to delete some package (*.pkg) from your Mac OS installaction. Its assumed, you dont have uninstaller.
There is no official way to uninstall package, but you can do it manually using &amp;lsquo;pkgutil&amp;rsquo; tool. There is some articles (you can google it) which described the process.
To automate the process i have wrote this script uninstall-pkg.sh
#!/bin/sh  # this script allow you to uninstall given pkg file # ATTENTIONS!</description>
    </item>
    
    <item>
      <title>Distributed systems papers</title>
      <link>https://yantonov.com/post/2015-10-01-distributed-systems-papers/</link>
      <pubDate>Thu, 01 Oct 2015 15:49:22 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-10-01-distributed-systems-papers/</guid>
      <description>List of papers on distributed systems</description>
    </item>
    
    <item>
      <title>Deep learning resouces</title>
      <link>https://yantonov.com/post/2015-09-13-deep-learning-resouces/</link>
      <pubDate>Sun, 13 Sep 2015 15:29:49 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-09-13-deep-learning-resouces/</guid>
      <description>Videos  Deep Learning and Neural Networks with Kevin Duh: course page NY Course by Yann LeCun: 2014 version, 2015 version ICML 2013 Deep Learning Tutorial by Yann Lecun (slides) Geoffery Hinton’s cousera course on Neural Networks for Machine Learning Large Scale Visual Recognition Challenge 2014, arxiv paper GTC Deep Learning 2015 Hugo Larochelle Neural Networks [class[(https://www.youtube.com/playlist?list=PL6Xpj9I5qXYEcOhn7TqghAJ6NAPrNmUBH), slides My youtube playlist Yaser Abu-Mostafa’s Learning from Data course (youtube playlist) Stanford CS224d: Deep Learning for Natural Language Processing: syllabus, youtube playlist, reddit Neural Networks for Machine Perception: vimeo Deep Learning for NLP (without magic): page, better page, video1, video2, youtube playlist Introduction to Deep Learning with Python: video, slides, code Machine Learning course with emphasis on Deep Learning by Nando de Freitas (youtube playlist), course page, torch practicals NIPS 2013 Deep Learning for Computer Vision Tutorial – Rob Fergus: video, slides  Links  Deeplearning.</description>
    </item>
    
    <item>
      <title>Crdt reading list</title>
      <link>https://yantonov.com/post/2015-08-02-crdt-reading-list/</link>
      <pubDate>Sun, 02 Aug 2015 12:14:54 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-08-02-crdt-reading-list/</guid>
      <description>CRDT reading list</description>
    </item>
    
    <item>
      <title>Y combinator</title>
      <link>https://yantonov.com/post/2015-06-07-y-combinator/</link>
      <pubDate>Sun, 07 Jun 2015 17:50:14 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-06-07-y-combinator/</guid>
      <description>Mike Vanier wrote great article about Y-combinator.</description>
    </item>
    
    <item>
      <title>Functional composition and transducers</title>
      <link>https://yantonov.com/post/2015-04-12-functional-composition-and-transducers/</link>
      <pubDate>Sun, 12 Apr 2015 09:19:18 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-04-12-functional-composition-and-transducers/</guid>
      <description>Another Rich Hickey&#39;s great talk about functional composition in general and transducers in particular.</description>
    </item>
    
    <item>
      <title>CS231n Convolutional neural networks for visual recognition</title>
      <link>https://yantonov.com/post/2015-03-29-cs231n-convolutional-neural-networks-for-visual-recognition/</link>
      <pubDate>Sun, 29 Mar 2015 15:56:41 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-03-29-cs231n-convolutional-neural-networks-for-visual-recognition/</guid>
      <description>Course Project Reports</description>
    </item>
    
    <item>
      <title>CS229 Machine Learning</title>
      <link>https://yantonov.com/post/2015-03-29-cs229-machine-learning/</link>
      <pubDate>Sun, 29 Mar 2015 15:49:56 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-03-29-cs229-machine-learning/</guid>
      <description>Final Projects 2012
Final Projects 2013
Final Projects 2014</description>
    </item>
    
    <item>
      <title>Stand up every 20 minutes (mac os)</title>
      <link>https://yantonov.com/post/2015-02-27-healthy-programmer/</link>
      <pubDate>Fri, 27 Feb 2015 00:33:33 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-02-27-healthy-programmer/</guid>
      <description>Foreword : Inspired by excellent post
Initial task: creating notification every 20 minutes can be decomposed into two parts:
 create notification scheduled launch  First subtask can be solved using this trivial script.
standup.sh:
#!/bin/sh  # stand up notification osascript -e &amp;#39;display notification &amp;#34;Stand up&amp;#34; with title &amp;#34;Healthy programmer&amp;#34;&amp;#39; say &amp;#34;Stand up&amp;#34; Second subtask (scheduled launch) can be solved using: daemon and agent mechanism.
Create file: com.example.stand.up.plist and place it into ~/Library/LaunchAgents/.</description>
    </item>
    
    <item>
      <title>Replicated SQLite</title>
      <link>https://yantonov.com/post/2015-02-23-replicated-sqlite/</link>
      <pubDate>Mon, 23 Feb 2015 23:31:28 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-02-23-replicated-sqlite/</guid>
      <description>Replicated SQLite using the Raft consensus protocol written in Go #sqlite #raft #consensus #golang
It seems, its time to start learning go</description>
    </item>
    
    <item>
      <title>Path to learn haskell</title>
      <link>https://yantonov.com/post/2015-02-21-path-to-learn-haskell/</link>
      <pubDate>Sat, 21 Feb 2015 17:44:29 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-02-21-path-to-learn-haskell/</guid>
      <description>Some haskell resources recommended by @bytemyapp.
 CIS 194: Introduction to Haskell (Spring 2013) NICTA course Stanford CS240h Spring 2014 Path to learning haskell  </description>
    </item>
    
    <item>
      <title>Find the length of the loop</title>
      <link>https://yantonov.com/post/2015-02-21-find-the-length-of-the-loop/</link>
      <pubDate>Sat, 21 Feb 2015 16:06:23 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-02-21-find-the-length-of-the-loop/</guid>
      <description>One of the popular interivew tasks&amp;hellip;
You are given a head of a linked list. Its known list contains cycle. The goal is to determine the length of the loop.
Here is straghtforward solution in haskell
{-data Node a instance Eq a =&amp;gt; Eq (Node a) next :: Node a -&amp;gt; Node a -} data Phase = TryFindLoop | FindLength deriving (Eq) loopSize :: Eq a =&amp;gt; Node a -&amp;gt; Int loopSize a = slowAndFast a a 0 TryFindLoop where slowAndFast :: (Eq node) =&amp;gt; Node node -&amp;gt; Node node -&amp;gt; Int -&amp;gt; Phase -&amp;gt; Int slowAndFast slow fast len phase = let nextSlow = next slow nextPreFast = next fast nextFast = next nextPreFast in if (slow == nextPreFast || slow == nextFast) then if (phase == FindLength) then if (nextPreFast == nextFast) then 1 else 2*(len+1) - len - (if slow == nextFast then 0 else 1) else slowAndFast nextSlow nextSlow 0 FindLength else slowAndFast nextSlow nextFast (len + 1) phase Complexity: time o(n), memory o(1)</description>
    </item>
    
    <item>
      <title>Ultra leiningen plugin</title>
      <link>https://yantonov.com/post/2015-02-03-ultra-leiningen-plugin/</link>
      <pubDate>Tue, 03 Feb 2015 23:25:06 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-02-03-ultra-leiningen-plugin/</guid>
      <description>There is nice leiningen plugin named &amp;ldquo;Ultra&amp;rdquo; which can significantly improve your clojure&amp;lsquo;s repl interaction.
Main features:
 colorized output of data structures (using solarized theme) clear test output better stacktraces java object introspection.  </description>
    </item>
    
    <item>
      <title>Conditional get for rss hackers</title>
      <link>https://yantonov.com/post/2015-01-25-conditional-get-for-rss-hackers/</link>
      <pubDate>Sun, 25 Jan 2015 16:30:47 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-01-25-conditional-get-for-rss-hackers/</guid>
      <description>Dont forget about Last-Modified/If-Modified-Since, ETag/If-None-Match headers while retrieving rss feeds. Details can be found in this article.
p.s. fyi header field definitions rfc2616</description>
    </item>
    
    <item>
      <title>Run automation instruments script from the command line</title>
      <link>https://yantonov.com/post/2015-01-24-run-automation-instruments-script-from-the-command-line/</link>
      <pubDate>Sat, 24 Jan 2015 13:38:03 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-01-24-run-automation-instruments-script-from-the-command-line/</guid>
      <description>To run ui test from command line you can use instruments app as described here.
instruments -w deviceID -t defaultTemplateFilePath targetAppName \  -e UIASCRIPT scriptFilePath -e UIARESULTSPATH resultsFolderPath The problem is defaultTemplateFilePath depends on xcode version. Documentation says Automation.tracetemplate is located here :
/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Instruments/PlugIns/AutomationInstrument.bundle/Contents/Resources/Automation.tracetemplate Since xcode 6 Automation.tracetemplate can be found:
/Applications/Xcode.app/Contents/Applications/Instruments.app/Contents/PlugIns/AutomationInstrument.xrplugin/Contents/Resources/Automation.tracetemplate </description>
    </item>
    
    <item>
      <title>Unconventional review</title>
      <link>https://yantonov.com/post/2015-01-19-unconventional-review/</link>
      <pubDate>Mon, 19 Jan 2015 00:50:46 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2015-01-19-unconventional-review/</guid>
      <description>I have just found a couple of nice articles about review of popular javascript frameworks angular and react. Recommend to read it.</description>
    </item>
    
    <item>
      <title>Multi-queue replacement algorithm for second level buffer caches</title>
      <link>https://yantonov.com/post/2014-12-13-multi-queue-replacement-algorithm-for-second-level-buffer-caches/</link>
      <pubDate>Sat, 13 Dec 2014 13:09:21 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-12-13-multi-queue-replacement-algorithm-for-second-level-buffer-caches/</guid>
      <description>I have read a nice article written by Yuanyian Zhou and James F. Philbin &amp;ldquo;Multi-queue replacement algorithm for second level buffer caches&amp;rdquo;. Authors compares well known implementations LRU, MRU, LFU etc and introduces new, more efficient method based on multiple queues, which performs better than other described implementations.
I highly recommend to read it.</description>
    </item>
    
    <item>
      <title>List non latin file names in git</title>
      <link>https://yantonov.com/post/2014-12-07-list-non-latin-file-names-in-git/</link>
      <pubDate>Sun, 07 Dec 2014 23:32:31 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-12-07-list-non-latin-file-names-in-git/</guid>
      <description>Imagine you have commited file which name contain non latin letters.
git init test-repo cd test-repo echo &amp;#34;test&amp;#34; &amp;gt; тест.тэхэтэ git add . git commit -m &amp;#34;initial commit&amp;#34; Ok, lets list files changed at revision
git log -p Here you can see escaped file name, and obvious its hard to read.
diff --git &amp;quot;a/\321\202\320\265\321\201\321\202.\321\202\321\215\321\205\321\215\ new file mode 100644 index 0000000..9daeafb --- /dev/null +++ &amp;quot;b/\321\202\320\265\321\201\321\202.\321\202\321\215\321\205\321\215\321\202 @@ -0,0 +1 @@ +test To handle this case there is config options &amp;lsquo;core.</description>
    </item>
    
    <item>
      <title>Export files changed at revision from mercurial</title>
      <link>https://yantonov.com/post/2014-12-07-export-files-changed-at-revision-from-mercurial/</link>
      <pubDate>Sun, 07 Dec 2014 22:59:45 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-12-07-export-files-changed-at-revision-from-mercurial/</guid>
      <description>Sometimes (more precisely - rarely) you need to export files changed at given revision as directory tree instead of patch file.
Mercurial vcs has archive command which let you to export selected files at given revision:
hg archive --type files --rev $REVISION -I list_of_files To list files changed at revision:
hg log -r $REVISION --template &amp;#39;{files}\n&amp;#39; | sed &amp;#39;s/\n / -I /g&amp;#39; Here end of line character is used to handle the case of using space character in filename.</description>
    </item>
    
    <item>
      <title>Church numerals</title>
      <link>https://yantonov.com/post/2014-11-13-church-numerals/</link>
      <pubDate>Thu, 13 Nov 2014 08:17:25 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-11-13-church-numerals/</guid>
      <description>Church numerals is a great example of introducing abstraction in terms of composition of functions. This concept demonstrates that &amp;ldquo;data&amp;rdquo; (naturals numbers in particular) and operations on data can be defined in the same way - using higher-order functions.
Summary:
type Church a = (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a zero, cone, ctwo :: Church a zero s z = z one s z = s z two s = s .</description>
    </item>
    
    <item>
      <title>Programmable completion for git and mercurial</title>
      <link>https://yantonov.com/post/2014-11-09-programmable-completion-for-git-and-mercurial/</link>
      <pubDate>Sun, 09 Nov 2014 22:52:36 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-11-09-programmable-completion-for-git-and-mercurial/</guid>
      <description>Some time ago i read excellent post about emacs library pcomplete.
The author described implementation of completion for git, mercurial version control system using this library. Article is really usefull, i used code as is, its easy and provides all you need, but later i have some problem with it.
First problem - eager evaluation. General commands for git and mercurial are calculated once. Great, there is no reason to call external process like git or hg multiple times but precalculation occured at script evaluation.</description>
    </item>
    
    <item>
      <title>PATH variable for gui programs (Mac Os)</title>
      <link>https://yantonov.com/post/2014-11-04-path-variable-for-gui-programs-mac-os/</link>
      <pubDate>Tue, 04 Nov 2014 19:22:34 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-11-04-path-variable-for-gui-programs-mac-os/</guid>
      <description>Foreword:
Sometimes you need to edit PATH variable.
Of course you edit .bash_profile, .bashrc, .profile or other scripts and this works fine only in terminal.
GUI apps at Mac Os use its own PATH variable (moreover has its own environment), which can be set using &amp;lsquo;launchctl setenv PATH &amp;lt;PATH_VALUE&amp;gt;&amp;rsquo;.
So you need to setup PATH for GUI apps correctly, and do not forget about PATH var for terminal.
Moreover, after update to Mac Os X 10.</description>
    </item>
    
    <item>
      <title>Git rerere</title>
      <link>https://yantonov.com/post/2014-11-04-git-rerere/</link>
      <pubDate>Tue, 04 Nov 2014 14:26:21 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-11-04-git-rerere/</guid>
      <description>There is some usefull git command rerere (reuse recorded resolution). Sometimes especially for long lived branch you need to resolve same conflicts again and again. This command let you save the results of conflict resolution and apply it again when needed.
Let see how its works:
# create test repo git init rerere # move to it cd rerere # enable rerere - reuse recorded resolution (its disabled by default) git config rerere.</description>
    </item>
    
    <item>
      <title>Platform specific build event</title>
      <link>https://yantonov.com/post/2014-11-03-platform-specific-build-event/</link>
      <pubDate>Mon, 03 Nov 2014 13:43:28 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-11-03-platform-specific-build-event/</guid>
      <description>Sometimes you need to build .net solution/project on different platforms (for example while developing xamarin based application). In that case pre/post build events may contain platform specific instructions.
To handle this situation you can use &amp;lsquo;Condition&amp;rsquo; attribute and &amp;lsquo;OS&amp;rsquo; variable, for example, like this:
&amp;lt;PostBuildEvent Condition=&amp;#34; &amp;#39;$(OS)&amp;#39; == &amp;#39;Windows_NT&amp;#39; &amp;#34;&amp;gt; &amp;lt;!--windows specifics --&amp;gt; copy $(TargetPath) $(ProjectDir)../Assemblies /Y &amp;lt;/PostBuildEvent&amp;gt; &amp;lt;PostBuildEvent Condition=&amp;#34; &amp;#39;$(OS)&amp;#39; == &amp;#39;Unix&amp;#39; &amp;#34;&amp;gt; &amp;lt;!--*nix, mac specifics --&amp;gt; cp -f $(TargetPath) $(ProjectDir).</description>
    </item>
    
    <item>
      <title>Git log aliases</title>
      <link>https://yantonov.com/post/2014-10-31-git-log-aliases/</link>
      <pubDate>Fri, 31 Oct 2014 00:10:22 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-10-31-git-log-aliases/</guid>
      <description>Here are some usefull git aliases which i use on a daily basis:
Output samples are generated using clojure repository
List of one line commits
ls = log --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39;  List of commits with changed files
ll = log --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --decorate --numstat  List of commits without colors
lnc = log --pretty=format:&amp;quot;%h\\ %s\\ [%cn]&amp;quot;  Commits with dates
ldt = log --all --pretty=format:&#39;%Cred%h%Creset %Cgreen%ad%Creset -%C(yellow)%d%Creset %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39;  Commits with short dates</description>
    </item>
    
    <item>
      <title>Stackoverflow reputation problem</title>
      <link>https://yantonov.com/post/2014-10-28-stackoverflow-reputation/</link>
      <pubDate>Tue, 28 Oct 2014 21:08:23 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-10-28-stackoverflow-reputation/</guid>
      <description>Some time ago i wrote gist which described how to install ghc from source on ubuntu. Today i see question on stackoverflow.com connected with my gist. I have fixed gist immediately and think about leaving comment to person who had some difficulties with it. I log on using google account and try to leave comment and &amp;hellip; i cant do it because my repuration is too low (this is just new account).</description>
    </item>
    
    <item>
      <title>Mac os environment variables</title>
      <link>https://yantonov.com/post/2014-10-27-mac-os-environment-variables/</link>
      <pubDate>Mon, 27 Oct 2014 02:36:04 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-10-27-mac-os-environment-variables/</guid>
      <description>Suppose you install some program into your home directory (i had installed mercurial from source). To use it you have to patch PATH variable.
To achieve this, you needed to modify, for example, local .profile file (its undesirable to modify global config like etc/profile). So your .profile file contains something like this:
export PATH=$ADDITIONAL_PATH:$PATH It wokrs great from terminal. But you cant use variable defined such way from programs launched throught spotlight, because all apps started from gui interface of Mac Os has its own list of environemnt variables (independent from terminal).</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://yantonov.com/post/2014-10-27-hello-world/</link>
      <pubDate>Mon, 27 Oct 2014 01:19:36 +0500</pubDate>
      
      <guid>https://yantonov.com/post/2014-10-27-hello-world/</guid>
      <description>hello world :-)</description>
    </item>
    
  </channel>
</rss>
