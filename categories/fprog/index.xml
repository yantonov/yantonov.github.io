<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fprog on (map solve problems)</title>
    <link>http://yantonov.com/categories/fprog/</link>
    <description>Recent content in Fprog on (map solve problems)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jun 2015 17:50:14 +0500</lastBuildDate>
    <atom:link href="/categories/fprog/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Y combinator</title>
      <link>http://yantonov.com/blog/2015/06/07/y-combinator/</link>
      <pubDate>Sun, 07 Jun 2015 17:50:14 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2015/06/07/y-combinator/</guid>
      <description>Mike Vanier wrote great article about Y-combinator.</description>
    </item>
    
    <item>
      <title>Path to learn haskell</title>
      <link>http://yantonov.com/blog/2015/02/21/path-to-learn-haskell/</link>
      <pubDate>Sat, 21 Feb 2015 17:44:29 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2015/02/21/path-to-learn-haskell/</guid>
      <description>Some haskell resources recommended by @bytemyapp.
 CIS 194: Introduction to Haskell (Spring 2013) NICTA course Stanford CS240h Spring 2014 Path to learning haskell  </description>
    </item>
    
    <item>
      <title>Church numerals</title>
      <link>http://yantonov.com/blog/2014/11/13/church-numerals/</link>
      <pubDate>Thu, 13 Nov 2014 08:17:25 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2014/11/13/church-numerals/</guid>
      <description>Church numerals is a great example of introducing abstraction in terms of composition of functions. This concept demonstrates that &amp;ldquo;data&amp;rdquo; (naturals numbers in particular) and operations on data can be defined in the same way - using higher-order functions.
Summary:
type Church a = (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a zero, cone, ctwo :: Church a zero s z = z one s z = s z two s = s .</description>
    </item>
    
  </channel>
</rss>
