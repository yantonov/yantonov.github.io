<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fun on (map solve problems)</title>
    <link>http://yantonov.com/categories/fun/</link>
    <description>Recent content in fun on (map solve problems)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Feb 2015 16:06:23 +0500</lastBuildDate>
    <atom:link href="/categories/fun/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Find the length of the loop</title>
      <link>http://yantonov.com/blog/2015/02/21/find-the-length-of-the-loop/</link>
      <pubDate>Sat, 21 Feb 2015 16:06:23 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2015/02/21/find-the-length-of-the-loop/</guid>
      <description>One of the popular interivew tasks&amp;hellip;
You are given a head of a linked list. Its known list contains cycle. The goal is to determine the length of the loop.
Here is straghtforward solution in haskell
{- data Node a instance Eq a =&amp;gt; Eq (Node a) next :: Node a -&amp;gt; Node a -} data Phase = TryFindLoop | FindLength deriving (Eq) loopSize :: Eq a =&amp;gt; Node a -&amp;gt; Int loopSize a = slowAndFast a a 0 TryFindLoop where slowAndFast :: (Eq node) =&amp;gt; Node node -&amp;gt; Node node -&amp;gt; Int -&amp;gt; Phase -&amp;gt; Int slowAndFast slow fast len phase = let nextSlow = next slow nextPreFast = next fast nextFast = next nextPreFast in if (slow == nextPreFast || slow == nextFast) then if (phase == FindLength) then if (nextPreFast == nextFast) then 1 else 2*(len+1) - len - (if slow == nextFast then 0 else 1) else slowAndFast nextSlow nextSlow 0 FindLength else slowAndFast nextSlow nextFast (len + 1) phase  Complexity: time o(n), memory o(1)</description>
    </item>
    
  </channel>
</rss>
