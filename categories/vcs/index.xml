<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vcs on (map solve problems)</title>
    <link>http://yantonov.com/categories/vcs/index.xml</link>
    <description>Recent content in Vcs on (map solve problems)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/vcs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>List non latin file names in git</title>
      <link>http://yantonov.com/blog/2014/12/07/list-non-latin-file-names-in-git/</link>
      <pubDate>Sun, 07 Dec 2014 23:32:31 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2014/12/07/list-non-latin-file-names-in-git/</guid>
      <description>Imagine you have commited file which name contain non latin letters.
git init test-repo cd test-repo echo &amp;quot;test&amp;quot; &amp;gt; тест.тэхэтэ git add . git commit -m &amp;quot;initial commit&amp;quot;  Ok, lets list files changed at revision
git log -p  Here you can see escaped file name, and obvious its hard to read.
diff --git &amp;quot;a/\321\202\320\265\321\201\321\202.\321\202\321\215\321\205\321\215\ new file mode 100644 index 0000000..9daeafb --- /dev/null +++ &amp;quot;b/\321\202\320\265\321\201\321\202.\321\202\321\215\321\205\321\215\321\202 @@ -0,0 +1 @@ +test  To handle this case there is config options &amp;lsquo;core.</description>
    </item>
    
    <item>
      <title>Export files changed at revision from mercurial</title>
      <link>http://yantonov.com/blog/2014/12/07/export-files-changed-at-revision-from-mercurial/</link>
      <pubDate>Sun, 07 Dec 2014 22:59:45 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2014/12/07/export-files-changed-at-revision-from-mercurial/</guid>
      <description>Sometimes (more precisely - rarely) you need to export files changed at given revision as directory tree instead of patch file.
Mercurial vcs has archive command which let you to export selected files at given revision:
hg archive --type files --rev $REVISION -I list_of_files  To list files changed at revision:
hg log -r $REVISION --template &#39;{files}\n&#39; | sed &#39;s/\n / -I /g&#39;  Here end of line character is used to handle the case of using space character in filename.</description>
    </item>
    
    <item>
      <title>Git rerere</title>
      <link>http://yantonov.com/blog/2014/11/04/git-rerere/</link>
      <pubDate>Tue, 04 Nov 2014 14:26:21 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2014/11/04/git-rerere/</guid>
      <description>There is some usefull git command rerere (reuse recorded resolution). Sometimes especially for long lived branch you need to resolve same conflicts again and again. This command let you save the results of conflict resolution and apply it again when needed.
Let see how its works:
# create test repo git init rerere # move to it cd rerere # enable rerere - reuse recorded resolution (its disabled by default) git config rerere.</description>
    </item>
    
    <item>
      <title>git log aliases</title>
      <link>http://yantonov.com/blog/2014/10/31/git-log-aliases/</link>
      <pubDate>Fri, 31 Oct 2014 00:10:22 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2014/10/31/git-log-aliases/</guid>
      <description>Here are some usefull git aliases which i use on a daily basis:
Output samples are generated using clojure repository
List of one line commits
ls = log --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39;  List of commits with changed files
ll = log --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --decorate --numstat  List of commits without colors
lnc = log --pretty=format:&amp;quot;%h\\ %s\\ [%cn]&amp;quot;  Commits with dates
ldt = log --all --pretty=format:&#39;%Cred%h%Creset %Cgreen%ad%Creset -%C(yellow)%d%Creset %s %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39;  Commits with short dates</description>
    </item>
    
  </channel>
</rss>
