<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on (map solve problems)</title>
    <link>http://yantonov.com/categories/functional-programming/index.xml</link>
    <description>Recent content in Functional Programming on (map solve problems)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>functional programming related podcasts</title>
      <link>http://yantonov.com/blog/2017/01/21/functional-programming-related-podcasts/</link>
      <pubDate>Sat, 21 Jan 2017 21:31:02 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2017/01/21/functional-programming-related-podcasts/</guid>
      <description>List{:target=&amp;rdquo;_blank&amp;rdquo;} of functional programming related podcasts. Happy listening!</description>
    </item>
    
    <item>
      <title>Church numerals</title>
      <link>http://yantonov.com/blog/2014/11/13/church-numerals/</link>
      <pubDate>Thu, 13 Nov 2014 08:17:25 +0500</pubDate>
      
      <guid>http://yantonov.com/blog/2014/11/13/church-numerals/</guid>
      <description>Church numerals is a great example of introducing abstraction in terms of composition of functions. This concept demonstrates that &amp;ldquo;data&amp;rdquo; (naturals numbers in particular) and operations on data can be defined in the same way - using higher-order functions.
Summary:
type Church a = (a -&amp;gt; a) -&amp;gt; a -&amp;gt; a zero, cone, ctwo :: Church a zero s z = z one s z = s z two s = s .</description>
    </item>
    
  </channel>
</rss>
